<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黄欢的博客</title>
    <description>北京网易有道后台研发工程师</description>
    <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/</link>
    <atom:link href="http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 04 Nov 2016 12:37:14 +0800</pubDate>
    <lastBuildDate>Fri, 04 Nov 2016 12:37:14 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>React学习笔记</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#react&quot; id=&quot;markdown-toc-react&quot;&gt;React学习笔记&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jsx&quot; id=&quot;markdown-toc-jsx&quot;&gt;JSX&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;范例&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#dom&quot; id=&quot;markdown-toc-dom&quot;&gt;非DOM属性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;事件&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;组建生命周期&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;首次使用组件时&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;之后使用该组件时&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;应用状态改变时&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;销毁时&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;数据流&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#props&quot; id=&quot;markdown-toc-props&quot;&gt;Props&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#state&quot; id=&quot;markdown-toc-state&quot;&gt;State&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#propsstate&quot; id=&quot;markdown-toc-propsstate&quot;&gt;Props和State中存放的数据&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;事件处理&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#setstate&quot; id=&quot;markdown-toc-setstate&quot;&gt;setState&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#replacestate&quot; id=&quot;markdown-toc-replacestate&quot;&gt;replaceState&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;组件的复合&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;react&quot;&gt;React学习笔记&lt;/h1&gt;

&lt;p&gt;来自 &lt;em&gt;《React 引领未来的用户界面开发框架》&lt;/em&gt;一书&lt;/p&gt;

&lt;h2 id=&quot;jsx&quot;&gt;JSX&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript XML，一种在React组建内部构建标签的类XML语法，实际会被转换成JavaScript函数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;范例&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;//编写一个Divider
var Divider = React.createClass({
  render: function(){
    &amp;lt;div className=&quot;divider&quot;&amp;gt;
    	&amp;lt;h2&amp;gt;{this.props.children}&amp;lt;/h2&amp;gt;&amp;lt;hr/&amp;gt;
    &amp;lt;/div&amp;gt;
  }
})

//Divider调用
&amp;lt;Divider&amp;gt;Questions&amp;lt;/Divider&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dom&quot;&gt;非DOM属性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;  可选的唯一标志符，便于React渲染时重用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ref&lt;/code&gt;  表示父子组建之间的引用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dangerouslySetInnerHTML&lt;/code&gt; 在需要将HTML内容设置为字符串时使用&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;事件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;事件已经被规范化，并同统一用驼峰形式表示。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;handleClick: function(event){...},
render: function(){
  return &amp;lt;div onClick={this.handleClick}&amp;gt;...&amp;lt;/div&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;实际上，如CSS的表示也是用这样的形式。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;组建生命周期&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;首次使用组件时&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getDefaultProps&lt;/code&gt; 可以为实例设置默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt; 初始化每个实例初始化&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillMount&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;之间最后修改&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;值的机会&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 创建虚拟DOM，是组件中唯一必要的方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;可以在该方法中通过调用&lt;code class=&quot;highlighter-rouge&quot;&gt;this.getDOMNode()&lt;/code&gt;来访问真实的DOM，可以在这里调用如JQuery等工具。如果React运行在服务端，该方法不会被调用&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-4&quot;&gt;之后使用该组件时&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getInitialState&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillMount&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-5&quot;&gt;应用状态改变时&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillReceivProps&lt;/code&gt; 组件的props可以通过父辈组件来修改，此时该方法将被调用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldComponentUpdate&lt;/code&gt; 在渲染前判断是否需要更新，做到精确的优化，不要草率的使用该方法&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUpdate&lt;/code&gt;不可以在该方法中更新&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;类似&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-6&quot;&gt;销毁时&lt;/h3&gt;

&lt;p&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;componentWillUnmount&lt;/code&gt;，可以在这个方法中做一些清理工作，比如创建的定时器或者添加的事件监听器&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;数据流&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;React中数据流是单向的，从父节点传递到子节点，因而组件是简单且易于把握的，组件只需要从父节点获取props渲染即可。如果顶层组件的某个prop改变了，React会递归地向下遍历整棵组件树，重新渲染所有使用这个属性的组件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;props&quot;&gt;Props&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Props即为properties，能够把任意类型的数据传递给组件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;//挂载数据时设置组件的props
var components=[{title:&#39;test_0&#39;},{title:&#39;test_1&#39;}];
&amp;lt;ListComponents components={components}/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt;来访问组件的&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;，但不能通过这种方式修改它，一个组件绝对不可以自己修改自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;可以是字符串，对象，事件处理器等。可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;PropTypes&lt;/code&gt;来验证&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;的类型，推荐使用。&lt;/p&gt;

&lt;h3 id=&quot;state&quot;&gt;State&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;每一个React组件都可以拥有自己的state，其与props的区别是，state只存在于组件内部&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;的值应该通过&lt;code class=&quot;highlighter-rouge&quot;&gt;this.setState()&lt;/code&gt;修改，只要该状态被修改，&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;方法就会被调用，然后导致之后的一系列变化。状态总是让组件变得更加复杂，把状态针对不同的组件独立开来，能更有利于调试。&lt;/p&gt;

&lt;h3 id=&quot;propsstate&quot;&gt;Props和State中存放的数据&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;中不要保存计算出的值，而应该保存最简单的数据，即为组件工作时的必要数据。而&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;用来作为数据源，保证数据的单向流动。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;事件处理&lt;/h2&gt;

&lt;p&gt;绑定方式实际上和JavaScript并没太大差别，例如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;var Demo = React.createClass({
  render: function(){
    &amp;lt;div onClick={this.handleClick}&amp;gt;Click here&amp;lt;/div&amp;gt;
  }
  
  handleClick: function(event){
    this.setState({isClicked : true});
  }
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;setstate&quot;&gt;setState&lt;/h3&gt;

&lt;p&gt;合并对象的方式来更新组件的状态&lt;/p&gt;

&lt;h3 id=&quot;replacestate&quot;&gt;replaceState&lt;/h3&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt;整个替换为新的&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;组件的复合&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;React的一个突出特点是构建组件的能力，实际上React代码主要就是构建组件，就像编写HTML文档时使用元素一样。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;// 封装一个radio input作为子组件
var AnswerRadioInput = React.createClass({
  	propTypes : {
     	id: React.PropTypes.string,
      	name: React.PropTypes.string.isRequired,
      	label: React.PropTypes.string.isRequired,
      	value: React.PropTypes.string.isRequired,
      	checked: React.PropTypes.bool
  	},
  	getDefaultProps : function(){
      retrun{
        id: null,
        checked:false
      }
  	},
    getInitialState : function(){
      var id = this.props.id? this.props.id : uniqueId(&#39;radio-&#39;);
      return {
        checked : this.props.checked,
        id : id,
        name : id
      }
    },
	render : function(){
      return (
        &amp;lt;div className=&quot;radio&quot;&amp;gt;
          &amp;lt;!-- htmlFor表示该Label为哪个控件服务，点击该label时，所比绑定的元素将获得焦点 --&amp;gt;
          &amp;lt;label htmlFor={this.props.id}&amp;gt;
            &amp;lt;input type=&quot;radio&quot;
              name={this.props.name}
              id={this.props.id}
              value={this.props.value}
              checked={this.state.checked}/&amp;gt;
            	{this.props.label}
          &amp;lt;/label&amp;gt;
        &amp;lt;/div&amp;gt;
      )
	}
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以上构建了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AnswerRadioInput&lt;/code&gt;组件，之后构建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AnswerMultipleChoiceQuestion&lt;/code&gt;来组合这一组件。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;// 父组件
var AnswerMultipleChoiceQuestion = React.createClass({
	propTyes: {
      value: React.PropTypes.string,
      choices: React.PropTypes.array.isRequired,
      onCompleted: React.PropTyes.func.isRequired
	},
  	getInitialState: function(){
      return {
        id: uniqueId(&#39;multiple-choice-&#39;),
        value: this.props.value
      }
  	},
  	renderChoices: function(){
      return this.props.choices.map(function(choice,i){
        return AnswerRadioInput({
          id: &quot;choice-&quot;+i,
          name: this.state.id,
          label: choice,
          value: choice,
          checked: this.state.value === choice
        });
      }.bind(this))
  	},
  	render: function(){
      return (
        &amp;lt;div className=&quot;form-group&quot;&amp;gt;
        	&amp;lt;label className=&quot;survey-item-label&quot; htmlFor={this.state.id}&amp;gt;
              	{this.props.label}
          	&amp;lt;/label&amp;gt;
          	&amp;lt;div className=&quot;survey-item-content&quot;&amp;gt;
          		{this.renderChoices()}
          	&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
  	}
});&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此时存在一个问题，子组件没办法把自身的变化通知给父组件，因此，父组件需要关联子组件才能知道其更新。方法实际上就是回调，父组件通过向子组件中传入一个回调函数，子组件在需要时调用。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-jsx&quot; data-lang=&quot;jsx&quot;&gt;//父组件传入回调函数
var AnswerMultipleChoiceQuestion = React.createClass({
  ...
  handleChanged: function(value){
    this.setState({value:value});
	this.props.onCompleted(value);
  },
  renderChoices: function(){
    return this.props.choices.map(function(choice, i){
      return AnswerRadioInput({
        ...
        onChanged: this.handleChanged
      });
    }.bind(this));
  },
});

//子组件调用回调
var AnswerRadioInpu = React.createClass({
  propTypes: {
    ...
    onChanged: React.PropTypes.func.isRequired
  },
  handleChanged: function(event){
    //event.target 找到事件的触发对象input
    var checked = event.target.checked;
    this.setState({checked: checked});
    if(checked){
      this.props.onChange(this.props.value);
    }
  },
  render: function(){
    return(
      &amp;lt;div className=&quot;radio&quot;&amp;gt;
        &amp;lt;label htmlFor={this.state.id}&amp;gt;
        	&amp;lt;input type=&quot;radio&quot;
              ...
              onChange={this.handleChanged}/&amp;gt;
          	{this.props.label}
        &amp;lt;/label&amp;gt;
      &amp;lt;/div&amp;gt;
    )
  }
})&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 03 Nov 2016 12:24:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/react/2016/11/03/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/react/2016/11/03/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>VPN搭建小记</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;引言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;服务器购买&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pptp&quot; id=&quot;markdown-toc-pptp&quot;&gt;方案一：PPTP协议搭建&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ppppptpdiptables&quot; id=&quot;markdown-toc-ppppptpdiptables&quot;&gt;1.安装ppp，pptpd和iptables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;2.修改相关配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;3.配置转发规则并启动&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#l2tpipsec&quot; id=&quot;markdown-toc-l2tpipsec&quot;&gt;方案二：L2TP/IPsec搭建&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#android-60&quot; id=&quot;markdown-toc-android-60&quot;&gt;Android 6.0问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;同一局域网问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;引言&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;VPN&lt;/strong&gt; 的作用相信大家也很清楚了，我在网上买的几个VPN感觉都不太稳定，速度还慢，所以决定自己搭建一个VPN。网上一般推荐用 &lt;strong&gt;搬瓦工&lt;/strong&gt; 和 &lt;strong&gt;Linode&lt;/strong&gt; 的 &lt;strong&gt;VPS&lt;/strong&gt; 来搭建，但因为我自己还想在服务器上做一些VPN之外的事情，所以选择了阿里云的 &lt;strong&gt;ECS&lt;/strong&gt; 来搭建。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;服务器购买&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/aliyun.png&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，选择阿里云香港ECS服务器，然后内存的话 &lt;strong&gt;1G&lt;/strong&gt; 就足够了，操作系统是 &lt;strong&gt;CentOS 32位&lt;/strong&gt;。然后如果是自己用的话，网络一定要选择按流量计费，根据我这几天用的情况，一天流量费几分钱，还是很便宜的，而且带宽可以选大些，速度快。&lt;/p&gt;

&lt;h3 id=&quot;pptp&quot;&gt;方案一：PPTP协议搭建&lt;/h3&gt;

&lt;p&gt;一开始自然是选择最简单的 &lt;strong&gt;PPTP&lt;/strong&gt; 协议方式，这个协议没有 &lt;strong&gt;L2TP/IPsec&lt;/strong&gt; 安全，但因为是自己用，倒是无所谓了。参考的教程是&lt;a href=&quot;http://effmx.com/articles/zai-vpsshang-da-jian-pptp-vpnde-ji-jian-gong-lue/&quot;&gt;在VPS上搭建PPTP VPN极简攻略&lt;/a&gt;。主要步骤如下：&lt;/p&gt;

&lt;h4 id=&quot;ppppptpdiptables&quot;&gt;1.安装ppp，pptpd和iptables&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
yum install -y ppp iptables
yum install pptpd
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/b21c12bf86e8&quot;&gt;搬瓦工VPN搭建&lt;/a&gt;上说要装 &lt;strong&gt;Perl&lt;/strong&gt; 什么了，不过阿里云的机器上貌似不需要。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;2.修改相关配置&lt;/h4&gt;
&lt;p&gt;```
/** 修改DNS /etc/ppp/options.pptpd */
ms-dns 8.8.8.8
md-dns 8.8.4.4&lt;/p&gt;

&lt;p&gt;/** 修改服务器IP和分配给客户端的IP /etc/pptpd.conf **/
localip 192.168.0.1 //VPN服务器ip
remoteip 192.168.0.234-255 //客户端ip
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
/** 允许转发 /etc/sysctl.conf */
net.ipv4.ip_forward=1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改后，&lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt;保存。&lt;/p&gt;

&lt;p&gt;```
/** 配置账号　/etc/ppp/chap-secrets **/
myusername pptpd mypassword *&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;3.配置转发规则并启动&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
/home/huanghuan/service iptables start //启动iptables
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source outerIp
(你的服务器的公网地址)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后启动VPN&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
/home/huanghuan/service pptpd restart
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;小结&lt;/h4&gt;

&lt;p&gt;然后你就可以通过 &lt;strong&gt;PPTP&lt;/strong&gt; 来连接VPN并使用了，但是在这里我却发现个问题，升级后的IOS，OSX不支持PPTP了。。。，这就很尴尬了，虽然Android是可以用的，但做个半成品出来就没啥意思了。而且我还发现即使在没升级的OSX上用，速度还很慢，所以这个方案就废弃了。&lt;/p&gt;

&lt;h3 id=&quot;l2tpipsec&quot;&gt;方案二：L2TP/IPsec搭建&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;L2TP&lt;/strong&gt; 据说吞吐量比 &lt;strong&gt;PPTP&lt;/strong&gt; 大很多，我在网上直接找了一个一件配置脚本来用，参见&lt;a href=&quot;https://teddysun.com/448.html&quot;&gt;L2TP/IPSec一键安装脚本&lt;/a&gt;。这个脚本装完之后其实还有不少问题，首先它的安装脚本是&lt;code class=&quot;highlighter-rouge&quot;&gt;l2tp.sh&lt;/code&gt;，然后安装后会生成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;l2tp.log&lt;/code&gt;，在里面可能会报一些错，然后自己对着这些错去搜解决方法，倒是很快。解决了报错的问题，并重新执行&lt;code class=&quot;highlighter-rouge&quot;&gt;l2tp.sh&lt;/code&gt;后，我能够连接VPN，但却上不了了网。这个问题倒是很好解决，因为这种情况肯定是VPN服务器没有把客户端的请求转发出去，所以我重新配了下 &lt;strong&gt;IPtables&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source outerIp
(你的服务器的公网地址)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后就能在IOS和MAC上连接这个VPN了。&lt;/p&gt;

&lt;h4 id=&quot;android-60&quot;&gt;Android 6.0问题&lt;/h4&gt;

&lt;p&gt;以为已经搞定了，但之后又发现了一个问题，Android特么又连不上了。。。，又是一通搜，发现这居然是个Android的Bug。在Google的论坛上&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=196939&quot;&gt;Issuce 196930: L2TP/IPsec VPN does not work in Android 6.0.1&lt;/a&gt;，我们的大Google都被用户骂成狗了。参考了一下论坛中用户的解决方法，在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ipsec.conf&lt;/code&gt;中添加这些配置：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
ike=aes256-sha2_256
phase2alg=aes256-sha2_256
sha2-truncbug=yes
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个问题的原因是Android的L2TP/IPsec实现有问题，而且还是个存在了很久了的问题。&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;同一局域网问题&lt;/h4&gt;

&lt;p&gt;既然Android，IOS/OSX都可以了，那问题按理说应该到此结束了。但后来发现如果在同一个局域网里，同时用IPsec/L2TP的方式连VPN，有一个会被顶掉（我的情况都是OSX被顶掉）。这个问题应该是因为局域网里的机器出网IP是一样的，应该在局域网内做一些配置可能才行，不过我就没去研究这个了。如果觉得是个问题，可以OSX用IPsec/L2TP，然后Android用L2TP，这样是可以在同一局域网里同时用的。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;VPN的配置总的来说还是挺简单的，不过其中的原理还没有深入理解，我大概看了下PPTP和L2TP/IPsec的原理，也算挺复杂的了，以后有需要可以去研究下。&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Oct 2016 18:41:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/10/30/VPN%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%A1.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/10/30/VPN%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%A1.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Redux开发初探</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;用到的主要技术和工具&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;开发工具&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;相关技术和组件&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#react&quot; id=&quot;markdown-toc-react&quot;&gt;React的思想&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redux&quot; id=&quot;markdown-toc-redux&quot;&gt;Redux的思想&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;代码实现&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;1.定义显示模块&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#action&quot; id=&quot;markdown-toc-action&quot;&gt;2.定义Action&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#reducer&quot; id=&quot;markdown-toc-reducer&quot;&gt;3.定义Reducer&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;4.定义容器&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;结果图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;概述&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;服务端&lt;/strong&gt;的研发工程师或多或少也会参与一些&lt;strong&gt;前端&lt;/strong&gt;的开发工作，有时候是因为前端人力的匮乏（以前实习的服务端组就没有前端，后台管理的网页都需要自己写），有时是因为自己想开发一些组内的小工具。因此，掌握一套前端开发技术，能够快速的构建网站也算是一个必备的技能。&lt;br /&gt;
在上述的背景下，由于组内目前采用了&lt;strong&gt;Redux&lt;/strong&gt;来进行开发，我也趁机初步实践了一下，这里来分享一下我的实践结果。&lt;br /&gt;
&lt;strong&gt;注意&lt;/strong&gt;：本文不涉及基本概念和语法的介绍，相关内容可参见：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hubwiz.com/class/552762019964049d1872fc88&quot;&gt;React在线课堂&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/03/react.html&quot;&gt;React入门实例教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://cn.redux.js.org/&quot;&gt;Redux中文文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;ECMAScript入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.material-ui.com/&quot;&gt;Material UI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/msh-using-npm-manage-node.js-dependence&quot;&gt;如何使用NPM来管理你的Node.js依赖&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;用到的主要技术和工具&lt;/h3&gt;

&lt;h5 id=&quot;section-2&quot;&gt;开发工具&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;WebStorm&lt;/li&gt;
  &lt;li&gt;Intellij Idea&lt;/li&gt;
  &lt;li&gt;Chrome&amp;amp;React插件&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;相关技术和组件&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;React&lt;/li&gt;
  &lt;li&gt;Redux&lt;/li&gt;
  &lt;li&gt;Material-UI&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
  &lt;li&gt;SpringBoot&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react&quot;&gt;React的思想&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;React&lt;/strong&gt;是由Facebook推出的JavaScript库，用于简化和规范前端的开发，同时优化页面的性能。作为一个写Java的后端开发，以前对&lt;strong&gt;JavaScript&lt;/strong&gt;的印象就是灵活而混乱，100人的JavaScript代码100种风格，有的工程师好歹会设计一下，进行一些模块化的提取和复用，而有的工程师甚至把JS都往一个&lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt;活着&lt;code class=&quot;highlighter-rouge&quot;&gt;vm&lt;/code&gt;文件里写，简直要命。而React的出现，以及&lt;strong&gt;ES6&lt;/strong&gt;的应用，能够有效提高前端代码的可读性，同时提高其渲染性能（关于性能方面，因为还怎么接触，暂时不做讨论）。&lt;/p&gt;

&lt;p&gt;归纳一下，我理解的&lt;strong&gt;React&lt;/strong&gt;的思想可以分为这几部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;组件化&lt;/strong&gt;，其实&lt;strong&gt;React&lt;/strong&gt;和&lt;strong&gt;ES6&lt;/strong&gt;的结合，写起来真的挺像&lt;strong&gt;Java&lt;/strong&gt;，在开发过程中能够很好的进行组件的分离和复用。&lt;/li&gt;
  &lt;li&gt;用&lt;strong&gt;状态(state)&lt;/strong&gt;和&lt;strong&gt;参数(props)&lt;/strong&gt;来代表组件的内容，每一个组件都有其独立的状态，该状态受组件内部行为的影响，同时受到外部参数的影响而改变。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;单向数据流&lt;/strong&gt;，相比于&lt;strong&gt;双向绑定&lt;/strong&gt;，实际是一个简化的思想，虽然会带来更多的代码，但流程更加清晰，问题更好追踪。&lt;/li&gt;
  &lt;li&gt;页面的渲染由&lt;strong&gt;React&lt;/strong&gt;控制，React会根据组件state的改变情况来决定是否进行重新渲染。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，&lt;strong&gt;React&lt;/strong&gt;相当于给了我们一个最佳实践的模版，开发者只需要关心&lt;strong&gt;行为&lt;/strong&gt;和&lt;strong&gt;数据&lt;/strong&gt;，完全从页面的渲染部分解放了出来。&lt;/p&gt;

&lt;h3 id=&quot;redux&quot;&gt;Redux的思想&lt;/h3&gt;

&lt;p&gt;理解了&lt;strong&gt;React&lt;/strong&gt;的思想，那么就我的理解而言，&lt;strong&gt;Redux&lt;/strong&gt;实际上是一个管理&lt;strong&gt;action&lt;/strong&gt;,&lt;strong&gt;state&lt;/strong&gt;和&lt;strong&gt;props&lt;/strong&gt;的工具，&lt;strong&gt;React&lt;/strong&gt;让开发者需要关注用户的行为和数据，而&lt;strong&gt;Redux&lt;/strong&gt;为我们提供了一个管理这两者的最佳实践模版。&lt;br /&gt;
Redux共由三个主要组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Action 定义动作的类型，和动作中携带的参数&lt;/li&gt;
  &lt;li&gt;Reducer 进行动作的处理，和状态的改变&lt;/li&gt;
  &lt;li&gt;Store 相当于一个小的数据库，用来存储所有组件的状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redux的规定，将用户操作的行为定义为Action，这些Action都需要由Reducer去处理。如果需要获取远端的数据，可以利用&lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;middleware&lt;/code&gt;来实现。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;代码实现&lt;/h3&gt;

&lt;h4 id=&quot;section-5&quot;&gt;1.定义显示模块&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component } from &#39;react&#39;;
import { connect } from &#39;react-redux&#39;;
import {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from &#39;material-ui/Table&#39;;
import FlatButton from &#39;material-ui/FlatButton&#39;;
import MenuItem from &#39;material-ui/MenuItem&#39;;
import RefreshIndicator from &#39;material-ui/RefreshIndicator&#39;;

const commentStyle = {
    width: 300
};

const filedStyle = {
    width: 200
};

const loadingStyle = {
    display: &#39;inline-block&#39;,
    position: &#39;relative&#39;
};

class App extends Component {

    constructor(props) {
        super(props);
        this.state = {
            showCheckboxes: false,
            open: false,
            info: &#39;暂无内容可以显示&#39;,
            scrollable: true,
            detectHeight: true,
        };
    }

    hanldeClose() {
        this.setState({
            open: false
        });
    }

    render() {

        return (
            &amp;lt;div&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;MenuItem&amp;gt;
                        表名:{this.props.params.tableName}
                    &amp;lt;/MenuItem&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;Table&amp;gt;
                        &amp;lt;TableHeader
                            displaySelectAll={this.state.showCheckboxes}
                            adjustForCheckbox={this.state.showCheckboxes}&amp;gt;
                            &amp;lt;TableRow&amp;gt;
                                &amp;lt;TableHeaderColumn style={filedStyle}&amp;gt;字段名&amp;lt;/TableHeaderColumn&amp;gt;
                                &amp;lt;TableHeaderColumn style={commentStyle}&amp;gt;字段描述&amp;lt;/TableHeaderColumn&amp;gt;
                                &amp;lt;TableHeaderColumn&amp;gt;字段类型&amp;lt;/TableHeaderColumn&amp;gt;
                                &amp;lt;TableHeaderColumn&amp;gt;是否可为空&amp;lt;/TableHeaderColumn&amp;gt;
                                &amp;lt;TableHeaderColumn&amp;gt;键类型&amp;lt;/TableHeaderColumn&amp;gt;
                                &amp;lt;TableHeaderColumn&amp;gt;默认值&amp;lt;/TableHeaderColumn&amp;gt;
                            &amp;lt;/TableRow&amp;gt;
                        &amp;lt;/TableHeader&amp;gt;
                        &amp;lt;TableBody displayRowCheckbox={this.state.showCheckboxes}&amp;gt;
                            {this.props.tableItems.map((tableItem)=&amp;gt;(
                                &amp;lt;TableRow key={tableItem[0]}&amp;gt;
                                    &amp;lt;TableRowColumn style={filedStyle}&amp;gt;
                                        {tableItem[0]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                    &amp;lt;TableRowColumn style={commentStyle}&amp;gt;
                                        {tableItem[1]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                    &amp;lt;TableRowColumn&amp;gt;
                                        {tableItem[2]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                    &amp;lt;TableRowColumn&amp;gt;
                                        {tableItem[3]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                    &amp;lt;TableRowColumn&amp;gt;
                                        {tableItem[4]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                    &amp;lt;TableRowColumn &amp;gt;
                                        {tableItem[5]}
                                    &amp;lt;/TableRowColumn&amp;gt;
                                &amp;lt;/TableRow&amp;gt;)
                            )}
                        &amp;lt;/TableBody&amp;gt;
                    &amp;lt;/Table&amp;gt;
                    &amp;lt;RefreshIndicator
                        size={50}
                        left={512}
                        top={0}
                        loadingColor={&quot;#FF9800&quot;}
                        status={this.props.loading}
                        style={loadingStyle}
                    /&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div &amp;gt;);
    }
}

/**
 * 将状态的改变绑定到props
 */
const mapStateToProps = (state)=&amp;gt; {
    return {
        params: state.requestReducer.tableParams,
        tableItems: state.requestReducer.tableItems,
        loading: state.requestReducer.loading
    }
};

export default connect(mapStateToProps)(App);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;该模块为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt;，其参数主要为&lt;code class=&quot;highlighter-rouge&quot;&gt;tableItems&lt;/code&gt;，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;mapStateToProps&lt;/code&gt;方法，该参数将会随着状态中的&lt;code class=&quot;highlighter-rouge&quot;&gt;state.requestReducer.tableItems&lt;/code&gt;而改变。&lt;/p&gt;

&lt;h4 id=&quot;action&quot;&gt;2.定义Action&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import fetch from &#39;isomorphic-fetch&#39;;


/**
 * 请求表数据中
 */
export const REQUESTING = &quot;REQUESTING&quot;;

/**
 * 获取到表的描述信息
 */
export const RECEIVE_TABLE_DESCRIPTIONS = &quot;RECEIVE_TABLE_DESCRIPTIONS&quot;;

/**
 * 获取表的描述信息
 * @param params 请求参数
 * @param tableItems 表的描述项
 */
export function receiveTableDescriptions(tableParams, tableItems) {
	return {
    	type: RECEIVE_TABLE_DESCRIPTIONS,
    	tableParams,
    	tableItems
	}
}

/**
 * 请求参数
 */
export function requesting(loading) {
	return {
    	type: REQUESTING,
    	loading
	}
}

/**
 * 根据数据库名和表名获取表的描述
 */
export function fetchTableDescriptions(tableParams) {
	return function (dispatch) {
    	dispatch(requesting({loading: &#39;loading&#39;}));
    	return fetch(`http://yourServiceAddress/dbs/${tableParams.dbName}/tables/${tableParams.tableName}`)
        	.then(response=&amp;gt;response.json())
        	.then(json=&amp;gt;dispatch(receiveTableDescriptions(tableParams, json.data))
        	).catch(e=&amp;gt;console.log(&quot;Fetch table names error&quot;, e))
	};
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;fetchTableDescriptions&lt;/code&gt;中用到的&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch&lt;/code&gt;是用来连接ACTION和REDUCER的桥梁，这个方法中发送了两个ACTION, &lt;strong&gt;REQUESTING&lt;/strong&gt;用来表示正在请求，会在页面上显示进度条提示，&lt;strong&gt;RECEIVE_TABLE_DESCRIPTIONS&lt;/strong&gt;表示接受到数据，用来改变&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;中的内容，这个行为需要一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Button&lt;/code&gt;来触发，这里我们就不做赘述了，触发的方式是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { fetchTableDescriptions } from &#39;../actions/AppAction&#39;;

handleButtonClick(item) {
    this.props.fetchTableDescriptions({
        dbName: &#39;yourDbName&#39;,
        tableName: item
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;reducer&quot;&gt;3.定义Reducer&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { combineReducers } from &#39;redux&#39;;
import { RECEIVE_TABLE_DESCRIPTIONS,REQUESTING } from &#39;../actions/AppAction&#39;;

/**
 * 请求的reducer
 */
function requestReducer(state = {
	loading: &#39;hide&#39;,
	tableItems: [],
	tableParams: {tableName: &#39;请在左侧选择表名&#39;}
}, action) {
	switch (action.type) {
    	case REQUESTING:
        	return Object.assign(
            	{},
            	state,
            	{
               		loading: &#39;loading&#39;
            	});
    	case RECEIVE_TABLE_DESCRIPTIONS:
        	return Object.assign(
            	{},
            	state,
            	{
                	loading: &#39;hide&#39;,
                	tableParams: action.tableParams,
                	tableItems: action.tableItems
            	}
        	);
    	default:
        	return state;
	}
}


const rootReducer = combineReducers({
	requestReducer
});

export default rootReducer;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;section-6&quot;&gt;4.定义容器&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var injectTapEventPlugin = require(&#39;react-tap-event-plugin&#39;);
injectTapEventPlugin();

import React, { Component } from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;
import MuiThemeProvider from &#39;material-ui/styles/MuiThemeProvider&#39;;
import { Provider } from &#39;react-redux&#39;;
import App from &#39;./App&#39;;
import configureStore from &#39;./store/configureStore&#39;;

const store = configureStore();

class Index extends Component {

	constructor(props) {
    	super(props);
	}

	render() {
    	return (
        	&amp;lt;Provider store={store}&amp;gt;
            	&amp;lt;MuiThemeProvider&amp;gt;
               	 &amp;lt;App/&amp;gt;	
            	&amp;lt;/MuiThemeProvider&amp;gt;
        	&amp;lt;/Provider&amp;gt;
    	);
	}
}

ReactDOM.render(
	&amp;lt;Index/&amp;gt;,
	document.getElementById(&#39;app&#39;)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里主要用来配置&lt;code class=&quot;highlighter-rouge&quot;&gt;store&lt;/code&gt;，其代码内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * 配置store
 * Created by huanghuan on 16/7/21.
 */
import { createStore, applyMiddleware } from &#39;redux&#39;;
import thunkMiddleWare from &#39;redux-thunk&#39;; //用于做异步action
import createLogger from &#39;redux-logger&#39;; //日志
import rootReducer from &#39;../reducers/root&#39;; //主reducer

export default function configureStore(preloadedState) {
	//创建store,并应用middleware
	const store = createStore(
    	rootReducer,
    	preloadedState,
    	applyMiddleware(thunkMiddleWare, createLogger())
	);

	//reducer的热替换?
	if (module.hot) {
    	module.hot.accept(&#39;../reducers&#39;, ()=&amp;gt; {
        	const nextRootReducer = require(&#39;../reducers&#39;).default;
        	store.replaceReducer(nextRootReducer);
    	})
	}

	return store;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;结果图&lt;/h3&gt;

&lt;p&gt;在定义完所有组件后，运行的结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/react_demo.jpg&quot; alt=&quot;demo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;这边文章通过一个简单的例子，粗略的介绍了我对Redux的使用体会，虽然感觉&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Redux&lt;/code&gt;有一定的入门成本，但一旦入门，开发的效率和效果真的非常让人满意，值得大家尝试。&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Jul 2016 11:29:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/react/2016/07/31/React%E5%88%9D%E6%8E%A2.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/react/2016/07/31/React%E5%88%9D%E6%8E%A2.html</guid>
        
        
        <category>React</category>
        
      </item>
    
      <item>
        <title>事务的隔离性</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;隔离性的作用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#innodb&quot; id=&quot;markdown-toc-innodb&quot;&gt;Innodb中的四种隔离级别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;事务隔离的实现原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;隔离性的作用&lt;/h2&gt;

&lt;h2 id=&quot;innodb&quot;&gt;Innodb中的四种隔离级别&lt;/h2&gt;

&lt;h2 id=&quot;section-1&quot;&gt;事务隔离的实现原理&lt;/h2&gt;

&lt;p&gt;参考：&lt;a href=&quot;http://tech.meituan.com/innodb-lock.html&quot;&gt;Innodb中的事务隔离级别和锁的关系&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 14:26:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/07/26/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/07/26/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E6%80%A7.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>利用Annotation Processing生成Hibernate工具</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;开发原因&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;开发组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;开发思路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;实现细节&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;注解&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#processor&quot; id=&quot;markdown-toc-processor&quot;&gt;注解Processor的实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;配置文件&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#maven&quot; id=&quot;markdown-toc-maven&quot;&gt;生成Maven包&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;开发原因&lt;/h2&gt;

&lt;p&gt;在使用Hibernate时候，经常会写这样的代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public List getTemplateList(long id) {
    DetachedCriteria criteria = DetachedCriteria.forClass(Template.class);
    criteria.add(Restrictions.eq(&quot;id&quot;, id));
    criteria.addOrder(Order.desc(&quot;create_time&quot;));
    return findByDetachedCriteria(criteria);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在设置条件的时候，不得不使用hibernate 实体类中对应的字段，这个时侯要么是跳到对应类或xml文件里复制粘贴，要么是自己手打，还容易出错。这个时侯就会想，如果能为实体类生成一些方法，以获取对应的实体类字段名，那就方便多了，达到如下这种效果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Override
public List getTemplateList(long id) {
    DetachedCriteria criteria = DetachedCriteria.forClass(Template.class);
    criteria.add(Restrictions.eq(TemplateTool.getId(), id));
    criteria.addOrder(Order.desc(TemplateTool.getCreate_Time());
    return findByDetachedCriteria(criteria);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样是不是方便了很多，在IDE的帮助下，能有效提高写代码的效率。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开发组件&lt;/h2&gt;

&lt;p&gt;Intellij&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开发思路&lt;/h2&gt;

&lt;p&gt;根据开发原因，很容联想到一个开源工具&lt;code class=&quot;highlighter-rouge&quot;&gt;LomBok&lt;/code&gt;，它能够自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;Getter/Setter&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;hashCode&lt;/code&gt;等方法，在intellij上配合lombok的插件，能够实时调出这些方法。于是我尝试在Lombok上去拓展，但发现Lombok并不能直接拓展，需要修改其源码并重新编译，这就没必要了。然后了解了一下Lombok的原理，是基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation Processing&lt;/code&gt;来实现的，简单来说就是为&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation&lt;/code&gt;注册一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Processor&lt;/code&gt;，在编译时动态生成代码，这算是实现工具的神器了。(这里当时认识有错误，Lombok实际是通过修改AST来实现的，并非&lt;code class=&quot;highlighter-rouge&quot;&gt;Annotation Processing&lt;/code&gt; 2016－07－01)&lt;/p&gt;

&lt;p&gt;于是我学习了一下这片文章 &lt;a href=&quot;http://hannesdorfmann.com/annotation-processing/annotationprocessing101&quot;&gt;Annotation Processing&lt;/a&gt;，照着上面所诉的模式写了一个Hibernate工具。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实现细节&lt;/h2&gt;

&lt;p&gt;源码参见：&lt;a href=&quot;https://github.com/sadwxqezc/AP&quot;&gt;Huang Huan Github Annotation Processing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;注解&lt;/h3&gt;

&lt;p&gt;首先需要定义一个作用于&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt;阶段的注解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Documented
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.SOURCE)
public @interface ORMTool {
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;processor&quot;&gt;注解Processor的实现&lt;/h3&gt;

&lt;p&gt;定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ORMToolProcessor&lt;/code&gt;来对应该注解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@AutoService(Processor.class)
@SupportedAnnotationTypes(&quot;bj.huanghuan.annotation.ORMTool&quot;)
public class ORMToolProcessor extends AbstractProcessor {

    /**
     * 打印信息
     **/
    private Messager messager;

    /**
     * 创建文件工具
     **/
    private Filer filer;

    /**
     * element工具
     **/
    private Elements elementUtils;


    private static final String SUFFIX = &quot;Tool&quot;;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        messager = processingEnv.getMessager();
        filer = processingEnv.getFiler();
        elementUtils = processingEnv.getElementUtils();
    }

    @Override
    public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, 
    RoundEnvironment roundEnv) {
        for (Element element : roundEnv.getElementsAnnotatedWith(ORMTool.class)) {
            if (element.getKind() != ElementKind.CLASS) {
                printError(element, 
                &quot;Only Classes can be annotated with @%s&quot;,
                 ORMTool.class.getSimpleName());
                return true;
            }
            TypeElement typeElement = (TypeElement) element;
            String className = typeElement.getSimpleName() + SUFFIX;
            try {
                JavaFileObject classFile = filer.createSourceFile(className);
                Writer writer = classFile.openWriter();
                JavaWriter javaWriter = new JavaWriter(writer);
                /*************** package Name *************/
                PackageElement packageElement = elementUtils.getPackageOf(typeElement);
                if (!packageElement.isUnnamed()) {
                    javaWriter.emitPackage(packageElement.getQualifiedName().toString());
                    javaWriter.emitEmptyLine();
                } else {
                    javaWriter.emitPackage(&quot;&quot;);
                }

                javaWriter.beginType(className, &quot;class&quot;, EnumSet.of(Modifier.PUBLIC));
                javaWriter.emitEmptyLine();

                /************ generate getter for fields ************/
                List&amp;lt;VariableElement&amp;gt; insideElements =
                 ElementFilter.fieldsIn(typeElement.getEnclosedElements());
                for (VariableElement variableElement : insideElements) {
                    javaWriter.beginMethod(&quot;String&quot;,
                     variableElement.getSimpleName().toString(),
                     EnumSet.of(Modifier.PUBLIC, Modifier.STATIC),
                     null, null);
                    javaWriter.emitStatement(&quot;return \&quot;&quot; +
                     variableElement.getSimpleName().toString() + &quot;\&quot;&quot;);
                    javaWriter.endMethod();
                    javaWriter.emitEmptyLine();
                }

                javaWriter.endType();
                javaWriter.close();
            } catch (IOException e) {
                messager.printMessage(Diagnostic.Kind.ERROR, 
                &quot;Gennerate Source Code Failed!&quot;);
            }
        }
        return false;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    /**
     * 错误日志打印
     *
     * @param element
     * @param msg
     * @param args
     */
    private void printError(Element element, String msg, Object... args) {
        messager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args), element);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这部门代码里有一些需要解释的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoService&lt;/code&gt;是Google提供的注册一个工具，其实作用应该是省去后面我将要讲的配置文件，不过影响不大。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, ...)&lt;/code&gt;是处理的入口，首先判断被&lt;code class=&quot;highlighter-rouge&quot;&gt;ORMTool&lt;/code&gt;注解的元素是不是&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&lt;/code&gt;类型，然后利用&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaWriter&lt;/code&gt;这个代码生成工具来构建新的Java文件，为注解的类生成一个对应的tool类。该类包含了被注解类中所有&lt;code class=&quot;highlighter-rouge&quot;&gt;Field&lt;/code&gt;的参数名&lt;code class=&quot;highlighter-rouge&quot;&gt;Getter&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;这里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeElement&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;VariableElement&lt;/code&gt;分别指的类类型和域类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;配置文件&lt;/h3&gt;

&lt;p&gt;这里需要一个配置文件，文件全路径是&lt;code class=&quot;highlighter-rouge&quot;&gt;/META-INF/services/javax.annotation.processing.Processor&lt;/code&gt;，配置文件中写入&lt;code class=&quot;highlighter-rouge&quot;&gt;ORMToolProcessor&lt;/code&gt;中的路径，如&lt;code class=&quot;highlighter-rouge&quot;&gt;bj.huanghuan.processor.ORMToolProcessor&lt;/code&gt;。实际上又了上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;@AutoService&lt;/code&gt;其实应该不需要手写这个文件了，不过我没试过，读者有兴趣可以试试。&lt;/p&gt;

&lt;p&gt;截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ap-structure&quot; alt=&quot;文件结构&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;maven&quot;&gt;生成Maven包&lt;/h3&gt;

&lt;p&gt;最后需要生成一个Maven包，加入到其它项目中供调用。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;测试用的&lt;code class=&quot;highlighter-rouge&quot;&gt;Test&lt;/code&gt;类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@ORMTool
public class Test {

	private int id;

	private String name;

	private Boolean isNew;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;TestTool&lt;/code&gt;类:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class TestTool {
	public TestTool() {
	}

	public static String id() {
    	return &quot;id&quot;;
	}

	public static String name() {
    	return &quot;name&quot;;
	}

	public static String isNew() {
    	return &quot;isNew&quot;;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;这种方式的工具需要在使用前编译一下代码，而且不能在原始代码上进行修改，也算是点小遗憾了。
PS: intellij上有个叫GeneratePropertyNameConstants的插件，用这个也可以，只不过麻烦些&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 10:49:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/26/%E5%88%A9%E7%94%A8Annotation-Processing%E7%94%9F%E6%88%90Hibernate%E5%B7%A5%E5%85%B7.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/26/%E5%88%A9%E7%94%A8Annotation-Processing%E7%94%9F%E6%88%90Hibernate%E5%B7%A5%E5%85%B7.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>读书笔记-思</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1. 万历十五年&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-is-water&quot; id=&quot;markdown-toc-this-is-water&quot;&gt;2. This is Water&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;3. 看见&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;4. 最好的告别&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;5. 追风筝的人&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;6. 悟空传&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 万历十五年&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;[美]黄仁宇著&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/wanli.jpg&quot; alt=&quot;万历十五年&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在看《万历十五年》之前，我先读完了整套《明朝那些事》，算是对整个明史有了一个全局的了解。《明朝那些事》算是在用网络小说的手法写历史，带入了较多作者个人的感情，每次人物总结会有一定的美化倾向，不够客观。但《明朝》这本书虽然不客观，却也不离谱，论述皆依据史实，同时文笔诙谐幽默，尤其对人物的描写着重笔墨，读起来通俗易懂，充满乐趣。因此，《明朝那些事》是文言文阅读能力有限的大众了解明史的较好途径，其中对于明朝政治，经济，军事等细节皆有描述，譬如“火耗”，“东林党”，&quot;心学&quot;等名词在其中有详尽的解释，能够大大降低阅读《万历十五年》的难度。&lt;/p&gt;

&lt;p&gt;万历十五年即为1587年，作者认为这一年为明朝历史的转折点，这个帝国从此走向灭亡。而我对本书的理解是，其作为转折点的原因有二：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;万历皇帝的怠政&lt;/li&gt;
  &lt;li&gt;国家的积弊：长期的以道德代替法律治理国家，以及文官治国发展到了一个顶峰，国家的体制已经凝固，难以改革。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然历史读起来会让人觉得事情都是理所当然的发生，但黄仁宇先生却以1587年为剖面，分析了人在其中的推动作用，这是尤为难得的贡献。而他在书中的分析也让人明白，即使人在历史中起了重大的推动作用，但该发生的事情却早晚必会发生。明朝的实际主人是文人阶层，底层人民受他们的统治。底层的人通过几代人的努力才有可能通过科举进入文人阶层，而文人阶层也只是为了维护国家的稳定，他们以道德约束这个有千万个农村构成的国家，却根本无心推动社会的发展。如此的社会循环所维持的时间能到达300年，之后则朝代更替再来一次。看历史总会有中悲凉的感觉，似乎所有的事情都是循环往复发生，有种宿命论的感觉。然而社会制度的变迁，其触发的源头却往往从技术的革新开始，而技术革新的本源来自于人们探索的精神。我想无论是制度，技术，主义，它们实际也只是人们探索的产物，而这种探索的精神为什么又只有人类才有，于其它地球生物上却并未看到。这样的精神是人先天就存在的，还是因为一些偶然和巧合正好赋予在人的身上了，这让我颇为费解。&lt;/p&gt;

&lt;h2 id=&quot;this-is-water&quot;&gt;2. This is Water&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By David Foster Wallace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/this_is_water.jpg&quot; alt=&quot;this is water&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在繁琐无聊的日常中，日复一日地保持自觉与警醒，困难得不可想象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;视频链接：&lt;a href=&quot;http://v.youku.com/v_show/id_XNjYyMjYzNDky.html?from=y1.2-1-103.3.4-1.1-1-1-3-0#paction&quot;&gt;生命中最简单又最困难的事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016年2月24日：写给将要参加工作的自己，莫要被生活所淹没，选择思考的方式，保持自觉与警醒。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 看见&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;柴静&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/kanjian.jpeg&quot; alt=&quot;kanjian&quot; /&gt;&lt;/p&gt;

&lt;p&gt;柴静的这本书，给我最大的震动便如书中所说的“真实自有万钧之力”，“人生是一个摆脱矇昧的过程”，要接近“真实”需要去感受的勇气和能力。能够感受才能够理解，在理解的基础上才能正确的思考，以接近“真实”，获取宽容的能力。但这需要一个过程，需要在生活中摔打和淬炼，要理解自己的弱点，也能理解别人的弱点，但要克服弱点并不是一个快速的过程，毕竟“如果人的弱点那么容易被克服，还要这么长的人生干什么”。而如果不正视自己的弱点，去感受和接受，时间只会带来经验的积累，却不会带来成长。&lt;/p&gt;

&lt;p&gt;感谢柴静这本书，让我知道了她“看见”的历程。虽然对于柴静人们各有褒贬，但既然能看见她的缺点和局限，也应能看到她的努力和思考，我相信今后的某个时刻，我会因为自己的生活，而回过头来再看这本书，寻求启发。毕竟柴静也是通过那么丰富的人生经历才能悟出一些道理，我也不可能只是靠多读几本书就能“看见”一切，还是要在真实的生活中磨砺。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4. 最好的告别&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By Atul Gavande&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/being_mortal.jpg&quot; alt=&quot;Being Mortal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一本见证了太多生死的医生写出来的书，如果人能够仅仅因为衰老，而在爱的人的身边平静离去，那将是每个人都期望的告别。但这本书用实际的例子告诉我们，人的衰老是必然的，也许技术可以延长这个过程，但往往伴随着痛苦的代价。’being mortal’，我们都是凡人，会经历亲人的衰老，也会迎来自己的衰老，在这个过程之中，我们需要接受现实，去尽可能的选择亲人或自己更想要的结果，做最好的告别。&lt;/p&gt;

&lt;p&gt;很多豆瓣读者会说书中作者并没有说清楚什么时候应该放手，什么时候应该告别。但其实作者已经说的很清楚，告别的时机并不因该由医生决定，医生是作为一个解释者的角色，而决定主要来自于患者自身的意愿，而家人应该在此基础上，帮助患者找到最好的告别方式。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;5. 追风筝的人&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By Khaled Hosseini&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/kiteRunner.jpeg&quot; alt=&quot;Kite Runner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;相信很多人会被那句“为你，千千万万遍”所打动，这也是贯穿全文的一句话，而最后哈桑的遭遇也令人叹息。
但整篇小说我认为最为成功的人物塑造是“父亲”，这个角色具有很多面：“冷漠的父亲”，“成功的商人”，“象征着勇气的英雄”，“思想自由的阿富汗人”，“和仆人的妻子有染的可憎的人”，“朋友”。我们或多或少能够在他是身上找到自己父亲的影子，对于男孩子来说，与父亲的关系往往很难如母亲那般亲近，年幼的时候会对父亲的威严感到畏惧，而长大了之后很多时候是用“朋友”的方式和父亲相处，之间总是隐隐有那么一堵墙，而能透过这堵墙的，是那斩不断的血脉联系。&lt;/p&gt;

&lt;p&gt;这篇小说中的“父亲”让我似乎明白了什么是生命的延续，也许对于“父亲”来说，不论孩子是否令自己满意，那总是他们身上的一种责任，一份宿命，一份存在的意义，他们会愿意为此做任何的事情，这样他们才能像书中的“父亲”一样平静的离开。实际上这是身处各个阶层的父亲都在做的事，作为“孩子”却不应该把这当作理所当然，理解这份平凡的伟大，it’s what makes us better than us!&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;6. 悟空传&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;今何在&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;/HuangHuanBlog/pics/wukong.jpg&quot; alt=&quot;Wu Kong&quot; /&gt;&lt;/p&gt;

&lt;p&gt;曾经踏碎凌霄，放肆桀骜的猴王，变成了一个痛苦迷茫，自我束缚的可怜猴。这个世界上并没有自由，总会有人搭建一套规则来让他运行，下位者反抗上位者，也许一开始真的带着让所有人自由的豪情，。但在这个过程中，会经历，会得到会失去，会害怕和恐惧，这些经历和情绪会改变自己，那份豪情总会被消磨殆尽。&lt;/p&gt;

&lt;p&gt;这本书之所以能感动大家，便是因为你总能把自己映照在悟空身上，活的越久，越不自由。&lt;/p&gt;

&lt;p&gt;这本书的文字有点晦涩，有故弄玄虚的感觉，偶尔能出现几句振聋发聩的句子，但总体让人读起来很不舒服。&lt;/p&gt;

</description>
        <pubDate>Mon, 13 Jun 2016 22:16:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/06/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/06/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</guid>
        
        
        <category>Read</category>
        
      </item>
    
      <item>
        <title>什么是数据库事务？</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;事务的定义　&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;为什么需要事务？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;事务的几大特性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mysql&quot; id=&quot;markdown-toc-mysql&quot;&gt;MySQL对事务的支持&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;事务的定义　&lt;/h2&gt;

&lt;p&gt;引用一段wikipedia中对数据库事务的定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A transaction symbolizes a unit of work performed within a database management system (or similar system) against a database, and treated in a coherent and reliable way independent of other transactions.  A transaction generally represents any change in database. Transactions in a database environment have two main purposes:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;ol&gt;
      &lt;li&gt;To provide reliable units of work that allow correct recovery from failures and keep a database consistent even in cases of system failure, when execution stops (completely or partially) and many operations upon a database remain uncompleted, with unclear status.&lt;/li&gt;
      &lt;li&gt;To provide isolation between programs accessing a database concurrently. If this isolation is not provided, the programs’ outcomes are possibly erroneous.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;对应的可以理解为：事务是数据库的基本工作单元，它以all-or-nothing的方式执行，让数据库从一个一致的状态转移到另一个一致的状态。即使系统发生故障，未执行完成的事务依然可以正确恢复，而事务之间可以在不同程度上进行隔离，以保证数据的正确性。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;为什么需要事务？&lt;/h2&gt;

&lt;p&gt;事务是为了保证数据库中数据的完整性和正确性。设想没有正确的事务支持，就可能出现A向B转账，A的钱被扣掉，而B却并没收到钱的情况。事务能保证要么A转账成功，或则失败，而A和B的钱的总额保持一致的状态。事务能够为我们的所有操作保证可确定的结果，在这样的前提下，我们才能进行各种各样的操作。&lt;/p&gt;

&lt;p&gt;值得一提的时候，对于简单的网页应用，可能其后台仅有一个数据库，是单点的事务。而在更多的生产系统中，数据源往往不只一个，包含不同类型的数据库,MQ等，这个时候还需要分布式事务（XA事务）的支持才能保证正确性，单点的事务往往由数据库等系统本身保证，而分布式事务还需要上层中间件的支持。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;事务的几大特性&lt;/h2&gt;

&lt;p&gt;事务的几大特性ACID可以说是老生常谈了，这里先列举一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原子性：原子性保证一个事务中的所有操作要么全部执行，要么全部不执行（执行中出错则全部回滚）&lt;/li&gt;
  &lt;li&gt;一致性：事务将使数据库从一个&lt;strong&gt;有效&lt;/strong&gt;的状态转换到另一个&lt;strong&gt;有效&lt;/strong&gt;的状态，满足定义的所有规则，包括约束，级联，触发器等&lt;/li&gt;
  &lt;li&gt;隔离性：事务之间的执行是相互隔离的&lt;/li&gt;
  &lt;li&gt;持久性：已提交的事务，将会对数据库产生永久的影响&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下一章将详细解释事务的隔离性。&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;MySQL对事务的支持&lt;/h2&gt;

&lt;p&gt;MySQL是互联网企业中用的最多的数据库，大家都知道使用InnoDB或则BerkeleyDB作为存储引擎才支持事务，之后的章节都将默认以MySQL作为范例，采用InnoDB作为存储引擎。&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 10:15:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/05/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/05/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>详解Spring事务</title>
        <description>&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://sadwxqezc.github.io/HuangHuanBlog/framework/2016/06/05/%E4%BB%80%E4%B9%88%E6%98%AF%E4%BA%8B%E5%8A%A1.html&quot;&gt;详解Spring事务：什么是事务?&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;详解Spring事务：事务的隔离性&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;详解Spring事务：Spring的事务管理&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;详解Spring事务：Spring中事务的Propagation&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;详解Spring事务：XA事务&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 02 Jun 2016 17:03:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/02/%E8%AF%A6%E8%A7%A3Spring%E4%BA%8B%E5%8A%A1.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/06/02/%E8%AF%A6%E8%A7%A3Spring%E4%BA%8B%E5%8A%A1.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>Spring分布式事务配置(atomikos)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;开发原因&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;开发组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;开发思路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;实现细节&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pom&quot; id=&quot;markdown-toc-pom&quot;&gt;Pom依赖&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#atomikos&quot; id=&quot;markdown-toc-atomikos&quot;&gt;Atomikos配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;开发原因&lt;/h2&gt;

&lt;p&gt;在Java后端开发过程中事务控制非常重要，而Spring为我们提供了方便的声明式事务方法&lt;code class=&quot;highlighter-rouge&quot;&gt;@transactional&lt;/code&gt;。但是默认的Spring事务只支持单数据源，而实际上一个系统往往需要写多个数据源，这个时候我们就需要考虑如何通过Spring实现对分布式事务的支持。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开发组件&lt;/h2&gt;

&lt;p&gt;框架：SpringBoot&lt;br /&gt;
组件：Atomikos&lt;br /&gt;
IDE：Intellij&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开发思路&lt;/h2&gt;

&lt;p&gt;对于分布式事务而言，&lt;code class=&quot;highlighter-rouge&quot;&gt;JTA&lt;/code&gt;是一个不错的解决方案，通常&lt;code class=&quot;highlighter-rouge&quot;&gt;JTA&lt;/code&gt;需要应用服务器的支持，但在查阅&lt;code class=&quot;highlighter-rouge&quot;&gt;SpringBoot&lt;/code&gt;的文档时发现，它推荐了&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Bitronix&lt;/code&gt;两种无需服务器支持的分布式事务组件，文档内容如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Boot supports distributed JTA transactions across multiple XA resources using either an &lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Bitronix&lt;/code&gt; embedded transaction manager. JTA transactions are also supported when deploying to a suitable Java EE Application Server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在这两个组件中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt;更受大家的好评，所以我选择使用它：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Atomikos is a popular open source transaction manager which can be embedded into your Spring Boot application. You can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;spring-boot-starter-jta-atomikos&lt;/code&gt; Starter POM to pull in the appropriate Atomikos libraries. Spring Boot will auto-configure Atomikos and ensure that appropriate depends-on settings are applied to your Spring beans for correct startup and shutdown ordering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实现细节&lt;/h2&gt;

&lt;h3 id=&quot;pom&quot;&gt;Pom依赖&lt;/h3&gt;

&lt;p&gt;就如上面文档内容所说，要在SpringBoot中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;atomikos&lt;/code&gt;，仅需要添加一个依赖，这也是SpringBoot非常便利的地方：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-jta-atomikos&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;atomikos&quot;&gt;Atomikos配置&lt;/h3&gt;

&lt;p&gt;值得一提的是，Spring支持通过&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;配置bean，和通过&lt;code class=&quot;highlighter-rouge&quot;&gt;annotation&lt;/code&gt;配置bean两种方式，在这里我们采用后者，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;xml&lt;/code&gt;方式真是太烦人。方式的配置方法其实很简单，只需要在注解了&lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;的类里面，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Bean&lt;/code&gt;来配置，详细的配置内容如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/************************** atomikos 多数据源配置 ***************************/

/*------- db1 -------*/

/**
 * db1的 XA datasource
 *
 * @return
 */
@Bean
@Primary
@Qualifier(&quot;db1&quot;)
public AtomikosDataSourceBean db1DataSourceBean() {
    AtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();
    atomikosDataSourceBean.setUniqueResourceName(&quot;db1&quot;);
    atomikosDataSourceBean.setXaDataSourceClassName(
            &quot;com.mysql.jdbc.jdbc2.optional.MysqlXADataSource&quot;);
    Properties properties = new Properties();
    properties.put(&quot;URL&quot;, db1_url);
    properties.put(&quot;user&quot;, db1_username);
    properties.put(&quot;password&quot;, db1_password);
    atomikosDataSourceBean.setXaProperties(properties);
    return atomikosDataSourceBean;
}

/**
 * 构造db1 sessionFactory
 *
 * @return
 */
@Bean
@Autowired
public AnnotationSessionFactoryBean sessionFactory(@Qualifier(&quot;db1&quot;) AtomikosDataSourceBean atomikosDataSourceBean) {
    AnnotationSessionFactoryBean sessionFactory = new AnnotationSessionFactoryBean();
    sessionFactory.setDataSource(atomikosDataSourceBean);
    sessionFactory.setPackagesToScan(db1_entity_package);
    Properties properties = new Properties();
    properties.put(&quot;hibernate.dialect&quot;, &quot;org.hibernate.dialect.MySQLInnoDBDialect&quot;);
    properties.put(&quot;hibernate.show_sql&quot;, &quot;false&quot;);
    properties.put(&quot;hibernate.format_sql&quot;, &quot;format&quot;);
    properties.put(&quot;hibernate.connection.autocommit&quot;, &quot;true&quot;);
    properties.put(&quot;hibernate.connection.url&quot;, atomikosDataSourceBean.getXaProperties().get(&quot;URL&quot;));
    properties.put(&quot;hibernate.connection.driver_class&quot;, &quot;com.mysql.jdbc.Driver&quot;);
    sessionFactory.setHibernateProperties(properties);
    return sessionFactory;
}

/*------- db2 -------*/

/**
 * db2的 XA datasource
 *
 * @return
 */
@Bean
@Qualifier(&quot;db2&quot;)
public AtomikosDataSourceBean db2DataSourceBean() {
    AtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();
    atomikosDataSourceBean.setUniqueResourceName(&quot;db2&quot;);
    atomikosDataSourceBean.setXaDataSourceClassName(
            &quot;com.mysql.jdbc.jdbc2.optional.MysqlXADataSource&quot;);
    Properties properties = new Properties();
    properties.put(&quot;URL&quot;, db2_url);
    properties.put(&quot;user&quot;, db2_username);
    properties.put(&quot;password&quot;, db2_password);
    atomikosDataSourceBean.setXaProperties(properties);
    return atomikosDataSourceBean;
}

/**
 * 构造db2 sessionFactory
 *
 * @return
 */
@Bean
@Autowired
public AnnotationSessionFactoryBean db2SessionFactory(
        @Qualifier(&quot;db2&quot;) AtomikosDataSourceBean atomikosDataSourceBean) {
    AnnotationSessionFactoryBean sessionFactory = new AnnotationSessionFactoryBean();
    sessionFactory.setDataSource(atomikosDataSourceBean);
    sessionFactory.setPackagesToScan(db2_entity_package);
    Properties properties = new Properties();
    properties.put(&quot;hibernate.dialect&quot;, &quot;org.hibernate.dialect.MySQLInnoDBDialect&quot;);
    properties.put(&quot;hibernate.show_sql&quot;, &quot;false&quot;);
    properties.put(&quot;hibernate.format_sql&quot;, &quot;format&quot;);
    properties.put(&quot;hibernate.connection.autocommit&quot;, &quot;true&quot;);
    properties.put(&quot;hibernate.connection.url&quot;, atomikosDataSourceBean.getXaProperties().get(&quot;URL&quot;));
    properties.put(&quot;hibernate.connection.driver_class&quot;, &quot;com.mysql.jdbc.Driver&quot;);
    sessionFactory.setHibernateProperties(properties);
    return sessionFactory;
}

/*--------- atomikos -----------*/

/**
 * transaction manager
 *
 * @return
 */
@Bean(destroyMethod = &quot;close&quot;, initMethod = &quot;init&quot;)
public UserTransactionManager userTransactionManager() {
    UserTransactionManager userTransactionManager = new UserTransactionManager();
    userTransactionManager.setForceShutdown(false);
    return userTransactionManager;
}

/**
 * jta transactionManager
 *
 * @return
 */
@Bean
public JtaTransactionManager transactionManager() {
    JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();
    jtaTransactionManager.setTransactionManager(userTransactionManager());
    return jtaTransactionManager;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后在该配置类上，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableTransactionManagement&lt;/code&gt;来启用事务管理，该注解会自动通过&lt;code class=&quot;highlighter-rouge&quot;&gt;by-type&lt;/code&gt;查找满足条件的&lt;code class=&quot;highlighter-rouge&quot;&gt;PlatformTransactionManager&lt;/code&gt;。其实通过上面的范例可以发现，该配置与我们通常单数据源配置所不同的是使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;AtomikosDataSourceBean&lt;/code&gt;来配置数据源，以及定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;UserTransactionManager&lt;/code&gt;，更详细的配置方法可以参见&lt;a href=&quot;https://www.atomikos.com/Documentation/SpringIntegration&quot;&gt;Atomikos Spring Integration&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt;的参数配置可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;jta.propertis&lt;/code&gt;来配置，这里我主要配置了日志的输出位置：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# log
com.atomikos.icatch.service=com.atomikos.icatch.standalone.UserTransactionServiceFactory
com.atomikos.icatch.log_base_dir=translogs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;一开始我觉得这不过是&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt;自己打的一些纪录日志，没什么用，干脆关掉得了，但通过查阅资料发现并不是这样。&lt;code class=&quot;highlighter-rouge&quot;&gt;Atomikos&lt;/code&gt;就是通过这些日志来保障事务过程的（比如进程挂了后怎么恢复），所以千万不能关，关于这点可参考文章&lt;a href=&quot;http://blog.csdn.net/hengyunabc/article/details/19433947&quot;&gt;扯淡下XA事务&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;至此为止，配置就完成了，之后只需要再需要事务控制的地方加上&lt;code class=&quot;highlighter-rouge&quot;&gt;@transactional&lt;/code&gt;注解即可。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;测试用的&lt;code class=&quot;highlighter-rouge&quot;&gt;MultiDataSourceTransTest&lt;/code&gt;类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Autowired
private DB1TestDao db1Dao;

@Autowired
private DB2TestDaO db2Dao;

@Test
@Transactional
public void testMulitSourceTransaction() {
    db1Dao.saveOrUpdate(new TestEntity());
    db2Dao.saveOrUpdate(new TestEntity());
}

@Test
@Transactional
@Rollback(false)
public void testMulitSourceTransactionWithOutRollBack() {
    db1Dao.saveOrUpdate(new TestEntity());
    db2Dao.saveOrUpdate(new TestEntity());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关于SpringBoot的单元测试配置请参见&lt;a href=&quot;http://127.0.0.1:4000/HuangHuanBlog/linux/2016/05/21/AOP%E4%B9%8BantiXSS.html&quot;&gt;AOP之AntiXSS&lt;/a&gt;中的范例，在SpringBoot的测试中，默认带有&lt;code class=&quot;highlighter-rouge&quot;&gt;@transactionl&lt;/code&gt;的测试会回滚，也就是执行完了啥也没变，所以可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;@Rollback(false)&lt;/code&gt;来强制不回滚，通过对比回滚和不回滚的执行结果，就能测试分布式事务是否得到了支持。&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 15:32:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/05/29/Spring%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>利用AOP进行Dao层antiXSS过滤</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;开发原因&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;开发组件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;开发思路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;实现细节&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;注解&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;注解的实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;开发原因&lt;/h2&gt;

&lt;p&gt;在后台开发过程中，往往需要对用户的输入进行antiXSS等ßΩ过滤，以防止被攻击。以Dao层为例，这一层在写入数据库之前，应该对数据进行过滤，此时对应的一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;saveOrUpdate()&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;update()&lt;/code&gt;操作，输入多数情况下是基本类型或者对于数据库实体的&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;。如果按照以往的写法，主要需要对&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型的数据（包括&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; Field）进行过滤，这时往往需要为对应的字段调用&lt;code class=&quot;highlighter-rouge&quot;&gt;antiXSS()&lt;/code&gt;方法，造成大量的&lt;code class=&quot;highlighter-rouge&quot;&gt;get/set&lt;/code&gt;代码，颇为麻烦，也造成代码冗长。因此，既然&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring&lt;/code&gt;具有强大的&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;功能，不妨尝试用它简化这一过程。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开发组件&lt;/h2&gt;

&lt;p&gt;SpringBoot，Intellij，Lombok(一个用于消除&lt;code class=&quot;highlighter-rouge&quot;&gt;get/set&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;hashcode&lt;/code&gt;这类代码的工具)&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;开发思路&lt;/h2&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;doAround&lt;/code&gt;方法截取传入参数，并利用反射筛选出其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; Filed进行antiXSS处理。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;实现细节&lt;/h2&gt;

&lt;h3 id=&quot;section-4&quot;&gt;注解&lt;/h3&gt;

&lt;p&gt;首先需要定义一个专门用来对方法进行antiXSS处理的注解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package beijing.huanghuan.anotations;

import java.lang.annotation.*;

/**
 * AntiXSS注解
 * &amp;lt;p/&amp;gt;
 * Created by huanghuan on 16/5/21.
 */
@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface AntiXSS {

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;注解的实现&lt;/h3&gt;

&lt;p&gt;定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AntiXSSAspect&lt;/code&gt;来对应该注解：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package beijing.huanghuan.anotations.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Service;

import java.lang.reflect.Field;

/**
 * 对String或者Entity中的String进行AntiXSS处理
 * &amp;lt;p/&amp;gt;
 * Created by huanghuan on 16/5/21.
 */
@Service
@Aspect
public class AntiXSSAspect {

    /**
     * 定义切面，定位到@AntiXSS注解的地方
     */
    @Pointcut(&quot;@annotation(beijing.huanghuan.anotations.AntiXSS)&quot;)
    public void antiXSSPointCut() {

    }

    /**
     * 对String类型或包含String类型的Entity进行antiXSS处理
     *
     * @param point
     */
    @Around(&quot;antiXSSPointCut()&quot;)
    public Object doAround(ProceedingJoinPoint point) {
        Object result = null;
        Object args[] = point.getArgs();
        try {
            antiXSS(args);
            result = point.proceed(args);
        } catch (Throwable throwable) {
            throwable.printStackTrace();
        }
        return result;
    }

    /**
     * antiXSS处理
     *
     * @param args
     */
    private void antiXSS(Object[] args) {
        if (args == null) {
            return;
        }
        for (int i = 0; i &amp;lt; args.length; i++) {
            if (args[i] == null) {
                continue;
            }
            if (args[i] instanceof String) {
                args[i] = antiXSS((String) args[i]);
            }
            if (!isPrimitive(args[i])) {
                args[i] = antiXSSEntity(args[i]);
            }
        }
    }

    /**
     * 对Entity进行antiXSS
     *
     * @param object
     * @return 处理后的结果
     */
    private Object antiXSSEntity(Object object) {
        Field[] fields = object.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            try {
                Object arg = field.get(object);
                if (arg instanceof String) {
                    arg = antiXSS((String) arg);
                    field.set(object, arg);
                }
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            }
        }
        return object;
    }

    /**
     * 判断是否是基本类型
     *
     * @param arg
     * @return
     */
    private boolean isPrimitive(Object arg) {
        try {
            /************ 基本类型中包含Class&amp;lt;T&amp;gt; TYPE字段 **********/
            Field field = arg.getClass().getDeclaredField(&quot;TYPE&quot;);
            field.setAccessible(true);
            Class fieldClass = (Class) field.get(arg);
            if (fieldClass.isPrimitive()) {
                return true;
            }
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    /**
     * antiXSS实现
     *
     * @param target
     * @return
     */
    private String antiXSS(String target) {
        /********* 自己的antiXSS或其它实现 **********/
        return target + &quot;(antiXSS success)&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在这部分代码中&lt;code class=&quot;highlighter-rouge&quot;&gt;@PointCut&lt;/code&gt;定义了其作用的位置是&lt;code class=&quot;highlighter-rouge&quot;&gt;AntiXSS&lt;/code&gt;注解的方法，而&lt;code class=&quot;highlighter-rouge&quot;&gt;@Around&lt;/code&gt;来进行参数处理，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ProceedingJoinPoint&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;getArgs&lt;/code&gt;即可获得所有的入参数，进行处理后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;proceed(args[])&lt;/code&gt;传回。&lt;/p&gt;

&lt;p&gt;在处理的过程中，由于我们只需要对&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型的域进行处理，对于本来就是基本类型的域，可以直接通过&lt;code class=&quot;highlighter-rouge&quot;&gt;instanceof String&lt;/code&gt;进行判定，而对于&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;这种&lt;code class=&quot;highlighter-rouge&quot;&gt;POJO&lt;/code&gt;类型的对象，我们需要一些其它的方法，来首现判定出它不是基本类型，然后再分析出其中的&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; Filed i.e. 反射:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先通过&lt;code class=&quot;highlighter-rouge&quot;&gt;getClass().getDeclaredFields()&lt;/code&gt;获取对象中的所有Field，并将它们的访问权限设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;对每一个Field，获取其中的名为&lt;code class=&quot;highlighter-rouge&quot;&gt;TYPE&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Field&lt;/code&gt;，这其实是一个取巧的方法，之所以这么做是因为基本类型的&lt;code class=&quot;highlighter-rouge&quot;&gt;wrapper&lt;/code&gt;里都一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;T&amp;gt; TYPE&lt;/code&gt;字段，通过该字段能够判定它是不是基本类型，而普通的与数据库对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;自然是不会有这中种字段的。&lt;/li&gt;
  &lt;li&gt;然后将该Field转化为Class，并通过Class的&lt;code class=&quot;highlighter-rouge&quot;&gt;isPrimitive&lt;/code&gt;方法来判定是否为基本类型，期间出现任何异常则表示该对象不是基本类型&lt;/li&gt;
  &lt;li&gt;当判定出该对象是&lt;code class=&quot;highlighter-rouge&quot;&gt;Entity&lt;/code&gt;，则获取其中的所有Field，按照之前的思路进行处理。注意，上面的代码只支持包含基本类型的Entity，对于像&lt;code class=&quot;highlighter-rouge&quot;&gt;hibernate&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;many to one&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;one to many&lt;/code&gt;的判定，还需要读者自己去实现。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里补充&lt;code class=&quot;highlighter-rouge&quot;&gt;Double&lt;/code&gt;源码中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Type&lt;/code&gt;字段定义：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * The {@code Class} instance representing the primitive type
 * {@code double}.
 *
 * @since JDK1.1
 */
public static final Class&amp;lt;Double&amp;gt; TYPE=(Class&amp;lt;Double&amp;gt;)Class.getPrimitiveClass(&quot;double&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;测试用的&lt;code class=&quot;highlighter-rouge&quot;&gt;TestAntiXSSDaoImpl&lt;/code&gt;类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * Created by huanghuan on 16/5/21.
 */
@Repository
public class TestAntiXSSDaoImpl {

    @AntiXSS
    public void testSave(long id, String text) {
        System.out.println(&quot;id: &quot; + id + &quot; text: &quot; + text);
    }

    @AntiXSS
    public void testSaveObject(Object object) {
        System.out.println(object.toString());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;测试类&lt;code class=&quot;highlighter-rouge&quot;&gt;AntiXSSAspectTest&lt;/code&gt;类,&lt;code class=&quot;highlighter-rouge&quot;&gt;@Data&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Lombok&lt;/code&gt;注解，自动生成&lt;code class=&quot;highlighter-rouge&quot;&gt;toString&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * Created by huanghuan on 16/5/21.
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(Starter.class)
public class AntiXSSAspectTest {

    @Autowired
    private TestAntiXSSDaoImpl testAntiXSSDao;

    @Test
    public void testAntiXSS() {
        testAntiXSSDao.testSave(1, &quot;test save string&quot;);
        testAntiXSSDao.testSaveObject(new TestEntity());
    }

    public
    @Data
    class TestEntity {
        long id = 2;
        String text = &quot;test save Object&quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id:1 text: test save string(antiXSS success)
AntiXSSAspectTest.TestEntity(id=2, text=test save Object(antiXSS success))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功的进行的处理，至于&lt;code class=&quot;highlighter-rouge&quot;&gt;antiXSS&lt;/code&gt;的具体实现请自己补充。&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 12:59:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/05/21/AOP%E4%B9%8BantiXSS.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/05/21/AOP%E4%B9%8BantiXSS.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
  </channel>
</rss>
