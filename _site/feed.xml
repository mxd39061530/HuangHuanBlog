<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黄欢的博客</title>
    <description>黄欢的博客：程序，读书，电影</description>
    <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/</link>
    <atom:link href="http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 30 Mar 2016 00:01:27 +0800</pubDate>
    <lastBuildDate>Wed, 30 Mar 2016 00:01:27 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Spring学习</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#spring&quot; id=&quot;markdown-toc-spring&quot;&gt;Spring关键特性范例&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;依赖注入和控制反转&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;参考书目：《Spring In Action》&lt;/li&gt;
  &lt;li&gt;IDE：Intellij Idea&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring框架已经是基于POJO的轻量级开发框架的领导者，其应用已十分广泛，它的根本使命是简化Java的开发过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;spring&quot;&gt;Spring关键特性范例&lt;/h2&gt;

&lt;p&gt;Spring的四种关键策略：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于POJO(Plain Ordinary java Object)的轻量级和最小侵入性编程&lt;/li&gt;
  &lt;li&gt;通过依赖注入(DI)和面向接口实现松耦合&lt;/li&gt;
  &lt;li&gt;基于切面(AOP)和惯例进行声明式编程&lt;/li&gt;
  &lt;li&gt;通过切面和模版减少样板式代码&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些特性或策略看起来总是让人头疼，还是通过一些例子来解释Spring的关键特性&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;依赖注入和控制反转&lt;/h3&gt;

&lt;p&gt;依赖注入的关键作用在于解耦合，将类与类之间的对象引用进行统一管理，其实现原理是Java的反射机制。&lt;/p&gt;

&lt;p&gt;下面举一个人骑车的例子：&lt;/p&gt;

&lt;p&gt;People类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1	package beijing.huangh.demos;
 2
 3	/**
 4	 * Created by huanghuan on 16/3/29.
 5	 */
 6	public class People {
 7	    private Bike bike;
 8
 9	    public People(Bike bike) {
10	        this.bike = bike;
11	    }
12
13	    public void ridingBike() {
14	        if (bike != null) {
15	            bike.ridingBike();
16	        }
17	    }
18	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Bike类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1	package beijing.huangh.demos;
 2
 3	/**
 4	 * Created by huanghuan on 16/3/29.
 5	 */
 6	public class Bike {
 7	    public void ridingBike() {
 8	        System.out.println(&quot;riding bike!!!&quot;);
 9	    }
10	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过xml文件进行装配：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1	&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
 2	&amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
 3	       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
 4	       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;
 5
 6	       &amp;lt;bean id=&quot;bike&quot; class=&quot;beijing.huangh.demos.Bike&quot;/&amp;gt;
 7	       &amp;lt;bean id=&quot;people&quot; class=&quot;beijing.huangh.demos.People&quot;&amp;gt;
 8	              &amp;lt;constructor-arg ref=&quot;bike&quot;/&amp;gt;
 9	       &amp;lt;/bean&amp;gt;
10	&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;调用测试类：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1	package beijing.huangh.test;
 2
 3	import beijing.huangh.demos.People;
 4	import org.springframework.context.ApplicationContext;
 5	import org.springframework.context.support.ClassPathXmlApplicationContext;
 6
 7	/**
 8	 * Created by huanghuan on 16/3/29.
 9	 */
10	public class DemoTest {
11	    public static void main(String[] args) {
12	        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);
13	        People people = (People) context.getBean(&quot;people&quot;);
14	        people.ridingBike();
15	    }
16	}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/bike.png&quot; alt=&quot;依赖注入范例&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这个范例中我们可以看出，类对象的构建和相互引用都由Spring的配置文件控制，&lt;code class=&quot;highlighter-rouge&quot;&gt;people&lt;/code&gt;对象所需要的&lt;code class=&quot;highlighter-rouge&quot;&gt;bike&lt;/code&gt;对象，也是由Spring框架通过构造器去注入。这样的方式咋看起来确实能够降低项目的复杂度，开发起来更加便捷，同时可以有效重用对象。但可以预见的是，当一个项目较为庞大，有多达数百个类，在这种情况下，如果依旧采用上诉的配置文件装配方法，整个配置文件将显得十分庞杂。而且IDE往往对框架的支持有限，要知道一个对象被注入了什么其它对象，恐怕只能进行不断的&lt;code class=&quot;highlighter-rouge&quot;&gt;file search&lt;/code&gt;了，Spring是否能解决我所说的问题了，我将在接下来的学习中寻找答案。&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Mar 2016 18:38:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/03/29/Spring%E5%AD%A6%E4%B9%A0.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/framework/2016/03/29/Spring%E5%AD%A6%E4%B9%A0.html</guid>
        
        
        <category>Framework</category>
        
      </item>
    
      <item>
        <title>算法学习计划</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;算法学习计划&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;算法基础&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;插入排序&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;算法学习计划&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;之前的算法学习更多的是为面试准备，具有很强的目的性。现在的出发点是进一步理解和掌握基本的算法，并静下心来领会算法中思考和解决问题的方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;主要学习资料：&lt;a href=&quot;http://open.163.com/special/opencourse/algorithms.html&quot;&gt;算法导论 第三版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码地址：&lt;a href=&quot;https://github.com/sadwxqezc/Algorithms.git&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;算法基础&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;算法是解决问题的步骤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-2&quot;&gt;插入排序&lt;/h3&gt;

&lt;p&gt;《算法导论》中对插入排序举了一个非常恰当的列子：大家斗地主时，边摸牌边对手中的牌排序，这实际上就是一个插入排序的过程，保证手中的牌始终是有序的。&lt;/p&gt;

&lt;p&gt;将如我们要对数组&lt;code class=&quot;highlighter-rouge&quot;&gt;[1,3,7,-1,11,2,23,0,1]&lt;/code&gt;排序，要求结果为升序，用插入排序的写法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void myInsertSort(int[] sequence) {
    for (int j = 1; j &amp;lt; sequence.length; j++) {
        int i = 0;
        int temp = sequence[j];
        while (i &amp;lt; j &amp;amp;&amp;amp; sequence[i] &amp;lt; temp) {
            i++;
        }
        for (int k = j; k &amp;gt; i; k--) {
            sequence[k] = sequence[k - 1];
        }
        sequence[i] = temp;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我的做法是从前往后找插入位置，而书中的做法是从后往前找，其写法如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void bookInsertSort(int[] sequence) {
    for (int j = 1; j &amp;lt; sequence.length; j++) {
        int temp = sequence[j];
        int i = j - 1;
        while (i &amp;gt; 0 &amp;amp;&amp;amp; sequence[i] &amp;gt; temp) {
            sequence[i + 1] = sequence[i];
            i--;
        }
        sequence[i + 1] = temp;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;两者时间性能差别不大，书上的写法显得更加简洁。&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 17:19:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/algorithm/2016/03/29/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%81%93.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/algorithm/2016/03/29/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%81%93.html</guid>
        
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>程序小事</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jekyllgithub&quot; id=&quot;markdown-toc-jekyllgithub&quot;&gt;1. jekyll博客github发布问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2. 准备的技能树&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;3. 今后工作状态&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#macsed&quot; id=&quot;markdown-toc-macsed&quot;&gt;4. Mac下sed问题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;5. 为博客添加目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jekyllgithub&quot;&gt;1. jekyll博客github发布问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;时间：2016年2月8日 晚&lt;/li&gt;
  &lt;li&gt;问题回放：在本地发布无问题的jekyll博客，在&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;到github上时迟迟不能显示。但如果把博客的创建时间设置为今天之前，则发布成功。&lt;/li&gt;
  &lt;li&gt;问题分析：目前还没有找到发生该问题的原因，不知道是否是因为github pages本身有这样的设置，正在调查中。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;jekyll博客的搭建和发布可参考:&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot;&gt;阮一峰的博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;解答 2016年2月23日&lt;/h4&gt;
&lt;p&gt;github应该采用的是utc时间，只需要将博客的&lt;code class=&quot;highlighter-rouge&quot;&gt;yaml&lt;/code&gt;信息头中的	&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;参数进行时区设置，如果作者使用的是北京时间，则设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;+0800&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 准备的技能树&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;redis&lt;/li&gt;
  &lt;li&gt;zookeeper&lt;/li&gt;
  &lt;li&gt;spring(需要进阶)&lt;/li&gt;
  &lt;li&gt;rest&lt;/li&gt;
  &lt;li&gt;数据库(从mysql入手)&lt;/li&gt;
  &lt;li&gt;脚本&lt;/li&gt;
  &lt;li&gt;算法(需要进阶)&lt;/li&gt;
  &lt;li&gt;网络&lt;/li&gt;
  &lt;li&gt;javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 今后工作状态&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;在工作中游刃有余，同时保持对新技术的兴趣和尝试，参与到产品的设计和策划中。&lt;/li&gt;
  &lt;li&gt;未来事不可预知，不要过多的担忧，多思无益&lt;/li&gt;
  &lt;li&gt;不可能每次遇到问题都已做好准备，要冷静的去思考解决之法&lt;/li&gt;
  &lt;li&gt;谦虚而脚踏实地，与志同道合的人称为朋友，不要为不合的人烦扰&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;macsed&quot;&gt;4. Mac下sed问题&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed -i &#39;&#39; &#39;1a test&#39; test&lt;/code&gt;时如果是&lt;code class=&quot;highlighter-rouge&quot;&gt;1a&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;1i&lt;/code&gt;都会报错，这应该是Mac自带的&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;问题，所以选择&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install gnu-sed&lt;/code&gt;来替换掉，改用&lt;code class=&quot;highlighter-rouge&quot;&gt;gsed&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;5. 为博客添加目录&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gsed -i &#39;6a *内容目录\n{:toc}\n&#39; *.md&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 18:11:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/develop/2016/03/23/%E7%A8%8B%E5%BA%8F%E5%B0%8F%E4%BA%8B.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/develop/2016/03/23/%E7%A8%8B%E5%BA%8F%E5%B0%8F%E4%BA%8B.html</guid>
        
        
        <category>Develop</category>
        
      </item>
    
      <item>
        <title>Linux命令大全 Part Two</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#thefuckmac&quot; id=&quot;markdown-toc-thefuckmac&quot;&gt;17. thefuck命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tarmac&quot; id=&quot;markdown-toc-tarmac&quot;&gt;18. tar命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aliasmac&quot; id=&quot;markdown-toc-aliasmac&quot;&gt;19. alias命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chmodmac&quot; id=&quot;markdown-toc-chmodmac&quot;&gt;20. chmod命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pvmac&quot; id=&quot;markdown-toc-pvmac&quot;&gt;21. pv命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bcmac&quot; id=&quot;markdown-toc-bcmac&quot;&gt;22. bc命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#uniq&quot; id=&quot;markdown-toc-uniq&quot;&gt;23. uniq命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#curlmac&quot; id=&quot;markdown-toc-curlmac&quot;&gt;24. curl命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#topfree&quot; id=&quot;markdown-toc-topfree&quot;&gt;25. top和free命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pastemac&quot; id=&quot;markdown-toc-pastemac&quot;&gt;26. paste命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cutmac&quot; id=&quot;markdown-toc-cutmac&quot;&gt;27. cut命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lsof&quot; id=&quot;markdown-toc-lsof&quot;&gt;28. lsof命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;有趣的命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mac&quot; id=&quot;markdown-toc-mac&quot;&gt;几个好玩的命令（Mac）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令后带(Mac)标记的，表示该命令在Mac OSX下测试，其它的在Debian下测试。&lt;/p&gt;

&lt;h3 id=&quot;thefuckmac&quot;&gt;17. thefuck命令(Mac)&lt;/h3&gt;

&lt;p&gt;thefuck命令就是用在你想说&lt;code class=&quot;highlighter-rouge&quot;&gt;fuck&lt;/code&gt;的时候，它能够自动尝试修复有错误的命令&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 fuck [option] &lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;中设置&lt;code class=&quot;highlighter-rouge&quot;&gt;eval $(thefuck --alias)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;范例一：&lt;code&gt;git brnch&lt;/code&gt;后回车再输入&lt;code class=&quot;highlighter-rouge&quot;&gt;fuck&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/thefuck.png&quot; alt=&quot;fuck&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tarmac&quot;&gt;18. tar命令(Mac)&lt;/h3&gt;

&lt;p&gt;tar命令用于文件的解压或压缩&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 tar [main option] [accessibility options] [filename or dir]&lt;/b&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;b&gt;main option 主选项 三者有且只能有一个&lt;/b&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-c&lt;/code&gt; 创建新的文件，相当于打包&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-x&lt;/code&gt; 释放文件，相当于拆包&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; 列出档案文件的内容，查看已经备份了哪些文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;b&gt;accessibility options 辅助选项&lt;/b&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-z&lt;/code&gt; 是否需要用gzip压缩或解压，一般格式为.tar.gz或者.tgz&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-j&lt;/code&gt; 是否需要用bzip2压缩或解压，一般格式为.tar.bz2&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; 压缩过程中显示文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 使用文档名&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--exclude FILE&lt;/code&gt; 压缩过程中不要将File打包&amp;lt;/code&amp;gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-C dir&lt;/code&gt; 切换工作目录，参考:&lt;a href=&quot;http://www.cnblogs.com/li-hao/archive/2011/10/03/2198480.html&quot;&gt;Linux下使用tar命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -xzvf mbadolato-iTerm2-Color-Schemes-a646a1d.tar.gz&lt;/code&gt; 解压到当前文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_xzvf.png&quot; alt=&quot;tar_xzvf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -tf mbadolato-iTerm2-Color-Schemes-a646a1d.tar.gz&lt;/code&gt; 显示压缩包中的文件目录，如果文件是用gizp压缩的需要加z参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_tf.png&quot; alt=&quot;tar_tf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -cjvf ./test.bz2 ./mbadolato-iTerm2-Color-Schemes-a646a1d&lt;/code&gt; 压缩文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_jcvf.png&quot; alt=&quot;tar_jcvf&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;aliasmac&quot;&gt;19. alias命令(Mac)&lt;/h3&gt;

&lt;p&gt;alias命令用来设定指令的别名，可以使用该命令将较长的命令简化。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 alias newCmd=&#39;originCmd [option]&#39;&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;alias -p&lt;/code&gt;显示已经定义的别名，可用&lt;code class=&quot;highlighter-rouge&quot;&gt;unalias&lt;/code&gt;命令删除别名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/alias.png&quot; alt=&quot;alias&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;alias ll=&#39;ls -lhaS&#39;&lt;/code&gt;可以缩短命令长度，如果要使该alias长期有效，需要写在系统环境变量中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/alias_ll.png&quot; alt=&quot;alias_ll&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;chmodmac&quot;&gt;20. chmod命令(Mac)&lt;/h3&gt;

&lt;p&gt;chmod命令用于设定文件或目录的权限，可以用数字或符号的方式进行设定，这里推荐用符号的方式&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 chmod [option] [filename|dirname]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt;递归的持续变更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod u-x,g+w,o=rwx function.sh&lt;/code&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;表示文件所有者，&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;表示组用户，&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;表示其它用户，&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;表示所有用户。而&lt;code class=&quot;highlighter-rouge&quot;&gt;-,+,=&lt;/code&gt;分别表示删除，增加和设定权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/chmod_ugo.png&quot; alt=&quot;chmod_ugo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a=rwx function.sh&lt;/code&gt;设定所有类型用户的权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/chmod_a.png&quot; alt=&quot;chmod_a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考:&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&quot;&gt;命令行的艺术&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pvmac&quot;&gt;21. pv命令(Mac)&lt;/h3&gt;

&lt;p&gt;pv命令可以通过管道来显示数据的处理进度&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 pv [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 显示百分比&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; 显示时间&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 传输速率&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; 估计的剩余时间&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 用数字代替进度条来显示百分比&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-L&lt;/code&gt; 限制传输速度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;pv ./12怒汉.mkv &amp;gt; ~/Work/Test/angry.mkv&lt;/code&gt; 显示拷贝的速度和百分比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/pv.png&quot; alt=&quot;pv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;echo &#39;this is a pv test&#39; | pv -L 2&lt;/code&gt;  限制传输速度为2Bytes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/pv_L.png&quot; alt=&quot;pv_L&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;bcmac&quot;&gt;22. bc命令(Mac)&lt;/h3&gt;

&lt;p&gt;bc命令可以用于计算&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 bc [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-l&lt;/code&gt; 定义数学函数的库，并将初始值scale设定为20&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;bc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/bc.png&quot; alt=&quot;bc&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;uniq&quot;&gt;23. uniq命令&lt;/h3&gt;

&lt;p&gt;参考:&lt;a href=&quot;http://sadwxqezc.github.io/HuangHuanBlog/linux/2016/02/11/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Four.html&quot;&gt;sort命令&lt;/a&gt;
uniq命令通常和sort命令合用，用于检查文本中重复出现的行列，但前提是重复行必须是相邻的。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 uniq [option] [filename] [outputfilename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-c&lt;/code&gt; 显示该行重复出现的次数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 仅仅显示重复出现的行列&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 仅显示出现一次的行列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;sort sort.txt | uniq -c&lt;/code&gt;等命令结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/uniq.png&quot; alt=&quot;uniq&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个好玩的命令站点：&lt;a href=&quot;http://www.commandlinefu.com/commands/browse/sort-by-votes&quot;&gt;Commandlinefu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/command.png&quot; alt=&quot;command&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;curlmac&quot;&gt;24. curl命令(Mac)&lt;/h3&gt;

&lt;p&gt;curl命令是一个非常强大的文件传输工具，利用，利用URL规则它支持文件的上传和下载。curl支持包括HTTP,HTTPS,Ftp等多种协议，同时支持Post，cookies，限速，认证等众多功能。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 curl [option] [params]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-A&lt;/code&gt; 设置用户代理&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c [file]&lt;/code&gt; 命令执行结束后将cookie写入到某个文件中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-C [offset]&lt;/code&gt; 断点续传&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e &lt;/code&gt;  设定来源网址&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-s &lt;/code&gt; 寂寞模式，不输出任何东西&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-S &lt;/code&gt; 显示错误&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-T [file] &lt;/code&gt; 上传文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u &lt;/code&gt; 设置用户名和密码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-o [filename]&lt;/code&gt; 将文件写入到某个文件中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-O &lt;/code&gt; 将文件写入到本地文件，保存原始文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;curl http://man.linuxde.net/test.iso -o filename.iso --progress&lt;/code&gt; 下载文件并显示进度条&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/curl_o.png&quot; alt=&quot;curl_o&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该命令功能较多，今后将进一步补充&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;topfree&quot;&gt;25. top和free命令&lt;/h3&gt;

&lt;p&gt;top命令实际上就是Linux下的“任务管理器”，能够实时的显示系统中各个进程的资源占用状况，默认刷新频率是5秒一次。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 top [option]&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;快捷键：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; 根据CPU占用排序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; 根据内存使用大小排序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 根据时间/累计时间排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一: &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; 显示效果，前五行显示了启动时间，任务数，cpu，内存和交换分区等信息，之后是更详细的各个进程信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/top.png&quot; alt=&quot;top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二: &lt;code class=&quot;highlighter-rouge&quot;&gt;free -m&lt;/code&gt; 如果只想查看内存占用，同样可使用&lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;命令，一般选择按&lt;code class=&quot;highlighter-rouge&quot;&gt;MB&lt;/code&gt;显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/free.png&quot; alt=&quot;free&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pastemac&quot;&gt;26. paste命令(Mac)&lt;/h3&gt;

&lt;p&gt;paste命令用于将多个文件的内容合并&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 paste [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; 串行处理而非平行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 设定间隔符号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例：&lt;code class=&quot;highlighter-rouge&quot;&gt;paste -s -d &#39;:&#39; test2 test1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/paste.png&quot; alt=&quot;paste&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cutmac&quot;&gt;27. cut命令(Mac)&lt;/h3&gt;

&lt;p&gt;cut命令用于在文件中剪切数据，以每一行为处理对象。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 cut [option] [filename]&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; 按字节分割，空格算一个字节，汉字三个字节&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; 按字符分割&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 按域分割&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 指定域分隔符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -b 1-7,9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_b.png&quot; alt=&quot;cut_b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -c 1-5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_c.png&quot; alt=&quot;cut_c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -d &quot; &quot; -f 1-5 testColumn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_f.png&quot; alt=&quot;cut_f&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;lsof&quot;&gt;28. lsof命令&lt;/h3&gt;

&lt;p&gt;在Linux中，一切都以文件的形式存在，包括常规数据，网络连接和硬件。而lsof(list open files)命令能够列出当前系统打开的文件，通过该命令可以查看进程和文件的占用关系。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 lsof [option] [filename]&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; 显示进程打开的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 显示某进程号的进程打开的文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i [46][TCP|UDP][@hostname|hostaddr][:service|port]&lt;/code&gt; 显示符合条件的进程情况&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;显示的内容：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COMMAND&lt;/code&gt; 进程名称&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PID&lt;/code&gt; 进程id&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 进程所有者&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FD&lt;/code&gt; 文件描述符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEVICE&lt;/code&gt; 指定磁盘的名称&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIZE&lt;/code&gt; 文件大小&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NODE&lt;/code&gt; 索引节点（文件在磁盘的标志）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NAME&lt;/code&gt; 打开文件的确切名称（带绝对路径）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof -i:5000&lt;/code&gt; 该命令的作用类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;netstat -anp | grep 5000&lt;/code&gt;，可以根据端口号，查看是哪个进程占用了5000端口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/lsof_i.png&quot; alt=&quot;lsof -i port&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof catlina.out&lt;/code&gt; 查看tomcat的logs文件中的日志文件被占用情况&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/lsof.png&quot; alt=&quot;lsof file&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;有趣的命令&lt;/h3&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;cal -j 2 2016&lt;/code&gt;&lt;br /&gt;
显示2016年2月份的日历，标注当天为一年中的第几天&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cal.png&quot; alt=&quot;cal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：screen在一个窗口中开启多个虚拟链接，适用于在screen的虚拟链接中运行脚本,不用再开新的窗口&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;screen -S yourname //创建一个名为yourname的虚拟链接
jekyll serve //在yourname中启动一个jekyll
ctrl+a,d //保存并返回
screen -ls //查看所有的screen
screen -r yourname //返回该screen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/screen.png&quot; alt=&quot;screen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：column命令可以用于格式化文本，但仅仅适用于较为简单的文本&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/column.png&quot; alt=&quot;column&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例四：file命令可以查看对象类型&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/file.png&quot; alt=&quot;file&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例五：xargs命令的作用时将参数分段传输给其它命令，后面加-n1表示每次传入一个参数，-n2表示传入两个参数。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/xargs.png&quot; alt=&quot;xargs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例六：basename命令可用于去除文件的前缀，只获取文件名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/basename.png&quot; alt=&quot;basename&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;mac&quot;&gt;几个好玩的命令（Mac）&lt;/h3&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;espeak haliluya&lt;/code&gt; 文本转语音命令，颇为有趣。Mac下可用&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;安装。&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;man ascii&lt;/code&gt; 可以方便的显示ascii 表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ascii.png&quot; alt=&quot;ascii&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code class=&quot;highlighter-rouge&quot;&gt;time read&lt;/code&gt;计时器，按&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+D&lt;/code&gt;结束&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/time_read.png&quot; alt=&quot;time&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Mar 2016 11:47:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/21/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8Part-II.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/21/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8Part-II.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>读书笔记-思</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1. 万历十五年&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-is-water&quot; id=&quot;markdown-toc-this-is-water&quot;&gt;2. This is Water&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;3. 看见&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;4. 最好的告别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 万历十五年&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;[美]黄仁宇著&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/wanli.jpg&quot; alt=&quot;万历十五年&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在看《万历十五年》之前，我先读完了整套《明朝那些事》，算是对整个明史有了一个全局的了解。《明朝那些事》算是在用网络小说的手法写历史，带入了较多作者个人的感情，每次人物总结会有一定的美化倾向，不够客观。但《明朝》这本书虽然不客观，却也不离谱，论述皆依据史实，同时文笔诙谐幽默，尤其对人物的描写着重笔墨，读起来通俗易懂，充满乐趣。因此，《明朝那些事》是文言文阅读能力有限的大众了解明史的较好途径，其中对于明朝政治，经济，军事等细节皆有描述，譬如“火耗”，“东林党”，&quot;心学&quot;等名词在其中有详尽的解释，能够大大降低阅读《万历十五年》的难度。&lt;/p&gt;

&lt;p&gt;万历十五年即为1587年，作者认为这一年为明朝历史的转折点，这个帝国从此走向灭亡。而我对本书的理解是，其作为转折点的原因有二：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;万历皇帝的怠政&lt;/li&gt;
  &lt;li&gt;国家的积弊：长期的以道德代替法律治理国家，以及文官治国发展到了一个顶峰，国家的体制已经凝固，难以改革。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然历史读起来会让人觉得事情都是理所当然的发生，但黄仁宇先生却以1587年为剖面，分析了人在其中的推动作用，这是尤为难得的贡献。而他在书中的分析也让人明白，即使人在历史中起了重大的推动作用，但该发生的事情却早晚必会发生。明朝的实际主人是文人阶层，底层人民受他们的统治。底层的人通过几代人的努力才有可能通过科举进入文人阶层，而文人阶层也只是为了维护国家的稳定，他们以道德约束这个有千万个农村构成的国家，却根本无心推动社会的发展。如此的社会循环所维持的时间能到达300年，之后则朝代更替再来一次。看历史总会有中悲凉的感觉，似乎所有的事情都是循环往复发生，有种宿命论的感觉。然而社会制度的变迁，其触发的源头却往往从技术的革新开始，而技术革新的本源来自于人们探索的精神。我想无论是制度，技术，主义，它们实际也只是人们探索的产物，而这种探索的精神为什么又只有人类才有，于其它地球生物上却并未看到。这样的精神是人先天就存在的，还是因为一些偶然和巧合正好赋予在人的身上了，这让我颇为费解。&lt;/p&gt;

&lt;h2 id=&quot;this-is-water&quot;&gt;2. This is Water&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By David Foster Wallace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/this_is_water.jpg&quot; alt=&quot;this is water&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在繁琐无聊的日常中，日复一日地保持自觉与警醒，困难得不可想象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;视频链接：&lt;a href=&quot;http://v.youku.com/v_show/id_XNjYyMjYzNDky.html?from=y1.2-1-103.3.4-1.1-1-1-3-0#paction&quot;&gt;生命中最简单又最困难的事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016年2月24日：写给将要参加工作的自己，莫要被生活所淹没，选择思考的方式，保持自觉与警醒。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 看见&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;柴静&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/kanjian.jpeg&quot; alt=&quot;kanjian&quot; /&gt;&lt;/p&gt;

&lt;p&gt;柴静的这本书，给我最大的震动便如书中所说的“真实自有万钧之力”，“人生是一个摆脱矇昧的过程”，要接近“真实”需要去感受的勇气和能力。能够感受才能够理解，在理解的基础上才能正确的思考，以接近“真实”，获取宽容的能力。但这需要一个过程，需要在生活中摔打和淬炼，要理解自己的弱点，也能理解别人的弱点，但要克服弱点并不是一个快速的过程，毕竟“如果人的弱点那么容易被克服，还要这么长的人生干什么”。而如果不正视自己的弱点，去感受和接受，时间只会带来经验的积累，却不会带来成长。&lt;/p&gt;

&lt;p&gt;感谢柴静这本书，让我知道了她“看见”的历程。虽然对于柴静人们各有褒贬，但既然能看见她的缺点和局限，也应能看到她的努力和思考，我相信今后的某个时刻，我会因为自己的生活，而回过头来再看这本书，寻求启发。毕竟柴静也是通过那么丰富的人生经历才能悟出一些道理，我也不可能只是靠多读几本书就能“看见”一切，还是要在真实的生活中磨砺。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;4. 最好的告别&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By Atul Gavande&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/being_mortal.jpg&quot; alt=&quot;Being Mortal&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 18 Mar 2016 13:23:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/03/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/03/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</guid>
        
        
        <category>Read</category>
        
      </item>
    
      <item>
        <title>胡思乱想</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ipmac&quot; id=&quot;markdown-toc-ipmac&quot;&gt;1. 为什么同时需要IP和MAC？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ipmac&quot;&gt;1. 为什么同时需要IP和MAC？&lt;/h3&gt;

&lt;p&gt;在看《图解HTTP》这本书时，突然想到这个问题，上知乎一查，正好也有这个问题：&lt;a href=&quot;https://www.zhihu.com/question/21546408&quot;&gt;有了IP地址，为什么还要用MAC地址？&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先在知乎的回答中，我比较认可的说法是同时使用IP和MAC地址，能够起到很好的分层效果。依赖于数据链路层的MAC地址，可在其上构建各种协议，而不仅限于IP。&lt;/p&gt;

&lt;p&gt;那么问题来了，在现有的网络结构里，如果我们就用IP或MAC来构建整个网络，给每个设备分配一个固定的ID，是否会简单很多？实际上不是这样，MAC就像人的身份证，而IP就像人的住址，不管人跑哪里去，都可以通过住址快速的找到他。而假如只有身份证信息，而不知道住址，要找到一个人相当于大海捞针。&lt;/p&gt;
</description>
        <pubDate>Wed, 16 Mar 2016 16:04:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/confused/2016/03/16/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/confused/2016/03/16/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3.html</guid>
        
        
        <category>Confused</category>
        
      </item>
    
      <item>
        <title>Linux命令大全 Part One</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#grep&quot; id=&quot;markdown-toc-grep&quot;&gt;1. grep命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ls&quot; id=&quot;markdown-toc-ls&quot;&gt;2. ls命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#find&quot; id=&quot;markdown-toc-find&quot;&gt;3. find命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#wc&quot; id=&quot;markdown-toc-wc&quot;&gt;4. wc命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cat&quot; id=&quot;markdown-toc-cat&quot;&gt;5. cat命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tail&quot; id=&quot;markdown-toc-tail&quot;&gt;6. tail命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#head&quot; id=&quot;markdown-toc-head&quot;&gt;7. head命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#du&quot; id=&quot;markdown-toc-du&quot;&gt;8. du命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whichwhereis&quot; id=&quot;markdown-toc-whichwhereis&quot;&gt;9. which命令和whereis命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#sort&quot; id=&quot;markdown-toc-sort&quot;&gt;10. sort命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#netstat&quot; id=&quot;markdown-toc-netstat&quot;&gt;11. netstat命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more&quot; id=&quot;markdown-toc-more&quot;&gt;12. more命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#less&quot; id=&quot;markdown-toc-less&quot;&gt;13. less命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ps&quot; id=&quot;markdown-toc-ps&quot;&gt;14. ps命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmuxmac&quot; id=&quot;markdown-toc-tmuxmac&quot;&gt;15. tmux命令(Mac)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ackmac&quot; id=&quot;markdown-toc-ackmac&quot;&gt;16. ack命令(Mac)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令后带(Mac)标记的，表示该命令在Mac OSX下测试，其它的在Debian下测试。&lt;/p&gt;

&lt;h3 id=&quot;grep&quot;&gt;1. grep命令&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;文本查找命令, 能够使用正则表达式的方式搜索文本，其搜索对象可以是单个或则多个文件&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;h4&gt;&lt;b&gt;基本格式 grep [option] [regex] [path]&lt;/b&gt;&lt;/h4&gt;
    &lt;p&gt;-c 只输出匹配行的数目&lt;br /&gt;
-n 显示匹配行的行号&lt;br /&gt;
-v 显示不包含匹配文本的行&lt;br /&gt;
-i 不区分大小写 (grep是大小写敏感的)&lt;br /&gt;
-R 文件夹下递归搜索&lt;br /&gt;
-l 只显示匹配的文件名  &lt;br /&gt;
-H 显示文件名&lt;br /&gt;
-A NUM(after)显示匹配的后几行&lt;br /&gt;
-B NUM(before)显示匹配的前几行&lt;br /&gt;
-C NUM显示匹配的前后几行  &lt;br /&gt;
–color 标出颜色&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例一：man grep | grep --color=always -n search
带颜色的文本搜索，并同时输出行号
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/grep_color_n.png&quot; alt=&quot;带颜色的搜索&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例二：man grep | grep --color=always -n &#39;\&amp;lt;search\&amp;gt;&#39;
正则表达式模式的搜索
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/grep_color_n_regex.png&quot; alt=&quot;正则表达式的搜索&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例三：grep -nR --color=always  a ./*.yml
在文件夹下的yml文件中搜索，并标注行号和对应行
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/grep_dir.png&quot; alt=&quot;文件夹搜索&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例四：grep -lR a ./*.yml
在文件夹下的yml文件中搜索，但只输出匹配的文件名
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/grep_dir_only.png&quot; alt=&quot;文件夹搜索&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ls&quot;&gt;2. ls命令&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;ls是命令行中用的最多的命令之一了，用于显示目录下的文件&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;h4&gt;&lt;b&gt;基本格式 ls [option]&lt;/b&gt;&lt;/h4&gt;
    &lt;p&gt;-a 列出所有文件，包括’.’开头的隐藏文件&lt;br /&gt;
-h 使打印结果易于使用者查看(human readable)&lt;br /&gt;
-l 列出文件的详细信息：创建者，创建时间，读写权限等&lt;br /&gt;
-s 显示文件大小&lt;br /&gt;
-t 按时间进行文件的排序&lt;br /&gt;
-S 以大小进行排序&lt;br /&gt;
-r 当前条件逆序&lt;br /&gt;
-L 显示文件链接名&lt;br /&gt;
-R 将目录中所有文件都递归显示出来&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例一：ls -lharts
输出文件信息，并时间从旧到新排列
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ls_r_t.png&quot; alt=&quot;详细信息&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例二：ls -R
递归输出目录下的所有文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ls_R.png&quot; alt=&quot;ls递归&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;find&quot;&gt;3. find命令&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;文件查找命令,find命令将递归的搜索目录下符合要求的所有文件&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;h4&gt;&lt;b&gt;基本格式 find [path] [option] [expression]&lt;/b&gt;&lt;/h4&gt;
    &lt;p&gt;-name 查找名为filename的文件&lt;br /&gt;
-perm 查找符合执行权限
-user 按照文件的所属主查找&lt;br /&gt;
-mtime -n +n 按照文件的更改时间查找文件，n代表天数&lt;br /&gt;
-ctime -n +n 按照创建时间查找&lt;br /&gt;
-newer f1 !f2 查更改时间在f1和f2之间的文件    &lt;br /&gt;
-size n 查找长度为n块的文件，一块为512 bytes&lt;br /&gt;
-depth 使得查找在进入子目录前先行查找完本目录&lt;br /&gt;
-prune 查找时忽略某个目录
-type 按文件类型查找，b为块设备，d为目录，f为普通文档&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例一：find ~ -name &#39;*.yml&#39; | grep &#39;\.yml&#39; --color=always
在用户目录下查找文件名后缀为.yml的文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/find_name.png&quot; alt=&quot;按照文件名查找&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例二：find . -perm 644
查找当前目录下权限为644的所有文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/find_perm.png&quot; alt=&quot;按照权限的搜索&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例三：find . -path &#39;./_site*&#39; -a -prune -o -name &#39;feed.xml&#39; -print
整个语句是在当前目录下查找名为feed.xml的文件，同时需要忽略./_site*路径的文件。
-a -o实际为逻辑与和逻辑或，当路径匹配时将执行-prune，那么将不会查找匹配路径中的文件，
当路径不匹配时则不执行-prune，-o后的语句始终执行。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/find_prune.png&quot; alt=&quot;忽略一些文件夹搜索&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例四：find . -maxdepth 2 -size 3
控制查找的深度
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/find_depth.png&quot; alt=&quot;限制搜索深度&quot; /&gt;&lt;/p&gt;

&lt;p&gt;补充：Linux的权限模式为三元组“owner”，“group”，“other”,权限对应表如下&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;rwx&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;-wx&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rw-&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;-w-&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r-x&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;--x&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r--&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;---&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;wc&quot;&gt;4. wc命令&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;用于统计输入中的字节数，字数，行数并输出&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;h4&gt;&lt;b&gt;基本格式 wc [option] [filename]&lt;/b&gt;&lt;/h4&gt;
    &lt;p&gt;-c 统计字节数&lt;br /&gt;
-l 统计行数&lt;br /&gt;
-m 统计字符数&lt;br /&gt;
-w 统计字数，一个字为由空白，跳格或换行字符分隔的字符串&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例一：wc -l _config.yml
统计行数，-c实际上可以查看文件的大小
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/wc.png&quot; alt=&quot;统计&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;cat&quot;&gt;5. cat命令&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;连结命令(Concatenation)，连结多个文本，或者以标准输出形式打印文件的内容&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;h4&gt;&lt;b&gt;基本格式 cat [option] [filename]&lt;/b&gt;&lt;/h4&gt;
    &lt;p&gt;-n 队输出的所有行编号&lt;br /&gt;
-b 与-n类似，但空行不编号&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例一：cat -b testColumn(cat -n testColumn)
显示文件内容
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cat_b_n.png&quot; alt=&quot;显示文件内容到控制台&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例二：cat testColumn testCat
同时显示两个文件内容
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cat_mul.png&quot; alt=&quot;显示两个文件&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;范例三：cat testColumn testCat&amp;gt;merge
将两个内容连结并输出到一个文件中，&amp;gt;为重新创建，&amp;gt;&amp;gt;为追加
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cat_merge.png&quot; alt=&quot;连结并输出&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tail&quot;&gt;6. tail命令&lt;/h3&gt;

&lt;p&gt;文本查看命令，可以看文本的最后几行。tail命令的优点在于其内容能够与输入同步更新，非常适用于查看实时日志。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 tail [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-n number&lt;/code&gt; 定位参数，+5表示从第五行开始显示，10或-10表示显示最后10行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 监控文本变化，更新内容&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-k number&lt;/code&gt; 从number所指的KB处开始读取&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;tail -n -5 catalina.out&lt;/code&gt;
输出最后5行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tail_n.png&quot; alt=&quot;tail_n&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;tail -f catalina.out&lt;/code&gt;
监听catalina.out最后行的变化并显示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tail_f.png&quot; alt=&quot;tail_f&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;head&quot;&gt;7. head命令&lt;/h3&gt;

&lt;p&gt;该命令与tail命令类似，默认显示文件前两行的内容&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 head [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-n number&lt;/code&gt; 显示前几行,-5表示文件中除了最后5行之外的所有内容&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c number&lt;/code&gt; 显示前几个字节&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;head -n 5 server.xml&lt;/code&gt;和&lt;code&gt;head -n －5 server.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/head_n.png&quot; alt=&quot;head_n&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;du&quot;&gt;8. du命令&lt;/h3&gt;

&lt;p&gt;该命令用于查看系统中文件和目录所占用的空间&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 du [option] [name]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-h&lt;/code&gt; 用human readable的方式显示&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--max-depth=number&lt;/code&gt; 最大的查询层次&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; 显示所有文件的大小，默认只显示目录的大小&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;du -h&lt;/code&gt; 显示目录下所有文件夹的大小&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/du.png&quot; alt=&quot;du&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;du -h catalina.out&lt;/code&gt;和&lt;code&gt;du -h ../logs&lt;/code&gt; 显示文件或目录的大小&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/du_name.png&quot; alt=&quot;du_name&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code&gt;du -ah --max-depth=1&lt;/code&gt;显示递归的层次为1，显示所有文件和文件夹大小&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/du_max_depth.png&quot; alt=&quot;du_max_depth&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;whichwhereis&quot;&gt;9. which命令和whereis命令&lt;/h3&gt;

&lt;p&gt;which命令的作用是在PATH变量制定的路径中，查找系统命令的位置。&lt;br /&gt;
whereis命令用于程序名的搜索，且只能搜索｛二进制文件，man说明文件，源代码文件｝。whereis的查询时通过查询系统的数据库文件记录，所以速度比find更快，但由于数据库的更新频率较为缓慢，其结果与实际状况并不一定一致。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-m&lt;/code&gt; 只查找说明文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-b&lt;/code&gt; 只查找二进制文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：which命令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/which.png&quot; alt=&quot;which&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：whereis命令&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/whereis.png&quot; alt=&quot;whereis&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sort&quot;&gt;10. sort命令&lt;/h3&gt;

&lt;p&gt;sort命令用于对文本进行排序，并将结果输出。其以文本的每一行为单位，从首字符向后，依次按照ascii码值进行比较，最后升序排列。（默认是忽略每行前面空格的）&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 sort [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 忽略重复行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 按照数字大小排序&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 逆序&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-k start,end&lt;/code&gt;start为比较的起始位置，end为结束位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;sort sort.txt&lt;/code&gt; 排序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sort.png&quot; alt=&quot;sort&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;br /&gt;
1. &lt;code&gt;sort -nk 2 -t - sort.txt&lt;/code&gt; 以&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;进行分割，对分割后的第二个域进行排序；&lt;br /&gt;
2. &lt;code&gt;sort -nrk 2 -t - sort.txt&lt;/code&gt; 逆序排序&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sort_t.png&quot; alt=&quot;sort_t&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code&gt;sort -t - -k 1.7 -nk 3,3 sort_k.txt&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;-k start,end&lt;/code&gt;中end可以省略，上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;1.7&lt;/code&gt;表示分割后第一个域的第7个字符，由于没有&lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;，则表示对第一个域中第7字符及其之后的字符排序。而&lt;code class=&quot;highlighter-rouge&quot;&gt;3,3&lt;/code&gt;则表示在前面排序的基础上，再对第三个域进行排序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sort_k.png&quot; alt=&quot;sort_k&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;netstat&quot;&gt;11. netstat命令&lt;/h3&gt;

&lt;p&gt;netstat用于输出linux系统的网络情况信息，以前面试的时候还被问过：“如何查看占用某个端口的程序的pid?”，这个问题实际用&lt;code&gt;netstat -anp&lt;/code&gt;输出，然后再grep一下即可。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 netstat [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; 显示所有socket连接&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-l&lt;/code&gt; 显示监控中(listening)的socket连接&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 直接使用ip地址，而不使用域名服务器&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 显示正在使用socket的程序的pid和名称&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 打印路由表&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; 显示TCP传输协议的连线状况&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 显示UDP传输协议的连线状况&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-s&lt;/code&gt; 显示网络工作信息统计表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;netstat -anp&lt;/code&gt;
显示程序的pid和名称&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/netstat_anp.png&quot; alt=&quot;netstat 端口&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;netstat -r&lt;/code&gt;
输出本机路由表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/netstat_r.png&quot; alt=&quot;netstat 路由表&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code&gt;netstat -lts&lt;/code&gt;
输出监听状态中的tcp协议统计信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/netstat_lts.png&quot; alt=&quot;netstat tcp统计&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;more&quot;&gt;12. more命令&lt;/h3&gt;

&lt;p&gt;more命令用于显示文件的内容，与cat和tail等命令不同的是，more命令是按页显示文件内容，同时具有搜寻字符串的功能。（由于more具有向前翻页功能，因此该命令会加载整个文件）&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 more [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;+n&lt;/code&gt; 从第n行开始显示&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 定义屏幕大小为n行&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;+/pattern&lt;/code&gt; 再显示前按pattern匹配子串并显示&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;-s&lt;/code&gt; 把连续的多个空行显示为一行&lt;/p&gt;

    &lt;p&gt;常用操作命令：&lt;/p&gt;
    &lt;ul&gt;
  &lt;li&gt;Enter 向下n行，默认为1行&lt;/li&gt;
  &lt;li&gt;Ctrl+F 跳过一屏&lt;/li&gt;
  &lt;li&gt;Ctrl+B 返回上一屏&lt;/li&gt;
  &lt;li&gt;空格键 向下滚动一屏&lt;/li&gt;
  &lt;li&gt;= 输出当前行的行号&lt;/li&gt;
  &lt;li&gt;在more模式中回车，输入&lt;code&gt;/pattern&lt;/code&gt;可以持续向下搜索&lt;/li&gt;&lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;more +/Deploy catalina.out&lt;/code&gt;&lt;br /&gt;
在catalina.out文件中查找“Deploy字符第一次出现的位置”，并从该处的前两行开始显示输出&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/more_+.png&quot; alt=&quot;more 搜索&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;more +10 -10 catalina.out&lt;/code&gt;&lt;br /&gt;
从第10行开始，每页10行&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/more_+_-.png&quot; alt=&quot;more 参数&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;less&quot;&gt;13. less命令&lt;/h3&gt;

&lt;p&gt;less命令与more命令对应，既可以前后翻看文件，同时还有前后搜索功能，除此之外，less在查看前不会加载整个文件。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 less [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;－N&lt;/code&gt; 显示每行的行号&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-i&lt;/code&gt; 忽略搜索时的大小写&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-s&lt;/code&gt; 将连续空行显示为一行&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;-m&lt;/code&gt; 显示百分比&lt;/p&gt;

    &lt;p&gt;常用操作命令：&lt;/p&gt;
    &lt;ul&gt;
  &lt;li&gt;/字符串 向下搜索“字符串”功能&lt;/li&gt;
  &lt;li&gt;?字符串 向上搜索“字符串”功能&lt;/li&gt;
  &lt;li&gt;n 重复前一个搜索&lt;/li&gt;
  &lt;li&gt;空格键 滚动一页&lt;/li&gt;
  &lt;li&gt;d 滚动半页&lt;/li&gt;
  &lt;li&gt;b 回溯一页&lt;/li&gt;
  &lt;li&gt;y 回溯一行&lt;/li&gt;
  &lt;li&gt;q 退出less命令&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;less -Nm catalina.out&lt;/code&gt;&lt;br /&gt;
显示行号和百分比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/less_Nm.png&quot; alt=&quot;less 行号百分比&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;/detail&lt;/code&gt;或者&lt;code&gt;?detail&lt;/code&gt;
向前向后搜索”detail”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/less_search.png&quot; alt=&quot;less 搜索&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ps&quot;&gt;14. ps命令&lt;/h3&gt;

&lt;p&gt;ps命令用来在Linux系统中显示进程的状态快照，其参数选项可谓非常之多。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 ps [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; 显示所有用户的进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-x&lt;/code&gt; 显示没有控制终端的进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 按照用户名称查询进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 列出全部信息，常和其它选项联用&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-j&lt;/code&gt; 用任务格式来显示进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; 显示所有进程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;ps -ef&lt;/code&gt; 用标准格式显示所有进程&lt;br /&gt;
显示的项目有：UID, PID, PPID(父进程ID), C(CPU资源百分比), STIME, TTY, TIME, CMD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ps_ef.png&quot; alt=&quot;ps_ef&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;ps aux&lt;/code&gt;&lt;br /&gt;
显示的项目有：USER, PID, %CPU, %MEM, VSZ(虚拟内存量KB), RSS(固定内存量), TTY(进程所运行在的终端机), STAT, START, TIME, COMMAND&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ps_aux.png&quot; alt=&quot;ps_aux&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;tmuxmac&quot;&gt;15. tmux命令(Mac)&lt;/h3&gt;

&lt;p&gt;tmux(Terminal Multiplexer)命令是一个颇为炫酷的命令，其特点与screen命令类似。tmux通过开出窗口，分拆面板，接管和分离会话，能够让使用者在一个窗口内同时进行多项操作。&lt;br /&gt;
tmux在osx的安装方式：&lt;code&gt;brew install tmux&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 tmux [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;tmux new -s sessionName&lt;/code&gt; 创建新的session会话&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux attach -t sessionName&lt;/code&gt; 重新连接上某一个session&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux kill-session -t sessionName&lt;/code&gt; 杀死某个session&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; 显示所有会话&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;tmux new -s mySession&lt;/code&gt; 创建一个名为mySession的会话&lt;br /&gt;
输入&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b d&lt;/code&gt;将从此会话脱离，如果要重新连接，则使用&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux attach -t mySession&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_mySession.png&quot; alt=&quot;tmux_new&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：在范例一的mySession中按下&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b c&lt;/code&gt;则会在mySession中创建一个新的窗口&lt;br /&gt;
可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b w&lt;/code&gt;来查看窗口列表，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &amp;lt;窗口号&amp;gt;&lt;/code&gt;来切换窗口&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b f&lt;/code&gt;来查找窗口，&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;来退出窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_windows.png&quot; alt=&quot;tmux_multiple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了便于穿窗口的识别，还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b ,&lt;/code&gt;来重命名窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_rename.png&quot; alt=&quot;tmux_rename&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：tmux还支持把窗口分割成多个面板，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &quot;&lt;/code&gt;为水平分割，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b %&lt;/code&gt;为垂直分割&lt;br /&gt;
通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &amp;lt;光标键&amp;gt;&lt;/code&gt;来进行窗口移动&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_panes.png&quot; alt=&quot;tmux_panes&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ackmac&quot;&gt;16. ack命令(Mac)&lt;/h3&gt;

&lt;p&gt;ack(better than grep)命令的作用和grep类似，但效果更好。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 ack [option] [pattern]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 按单词匹配&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--ingore-dir&lt;/code&gt; 忽略某些目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;ack -w 测试&lt;/code&gt; 与grep搜索的对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ack_w.png&quot; alt=&quot;ack_w&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

</description>
        <pubDate>Mon, 14 Mar 2016 16:24:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/14/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8Part-I.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/14/Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8Part-I.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>正则表达式</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;常规的正则表达式&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;正则表达式的符号&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;正则表达式范例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux&quot; id=&quot;markdown-toc-linux&quot;&gt;Linux下的正则表达式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java&quot; id=&quot;markdown-toc-java&quot;&gt;Java下正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;常规的正则表达式&lt;/h2&gt;

&lt;p&gt;正则表达式(Regular Expression)通常用于字符串的匹配问题，关于其作用性这里不再做赘述，本文主要讲解其基本语法和范例。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;正则表达式的符号&lt;/h3&gt;

&lt;p&gt;正则表达式主要分为普通字符和元字符（meta characters），其中元字符具有特殊的含义，如果在使用时要去除元字符的特殊意义，则需要转义。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 转义字符，能够去除特殊字符的含义，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;就相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 匹配除了&lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;之外的任何字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 匹配前面的子表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=0&lt;/code&gt;次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 匹配前面的子表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=1&lt;/code&gt;次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 匹配前面的子表达式零次或一次，当该符号跟在&lt;code class=&quot;highlighter-rouge&quot;&gt;*,+,?,{n},{n,},{n,m}&lt;/code&gt;时，会尽可能少的匹配所搜索的字符串。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;aaaa&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;a+?&lt;/code&gt;匹配单个&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;a+&lt;/code&gt;将匹配所有&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 匹配前面的子表达式&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;次，&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; 匹配至少&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;次，&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;n,m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;m&lt;/code&gt;次&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 从输入字符串的开始位置进行匹配&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 从输入字符串的结束位置进行匹配&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;x|y&lt;/code&gt; 匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[xyz]&lt;/code&gt; 匹配其中任意一个字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[^xyz]&lt;/code&gt; 匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;xyz&lt;/code&gt;之外的任意字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-z]&lt;/code&gt; 匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;之内的任意字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[^a-z]&lt;/code&gt; 匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;之外的任意字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt; 匹配字边界，即字与空格间的位置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\B&lt;/code&gt; 与&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;相反，匹配非字边界，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;test\B&lt;/code&gt;匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;mytestb&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;，而非&lt;code class=&quot;highlighter-rouge&quot;&gt;testb&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\d&lt;/code&gt; 匹配数字字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\D&lt;/code&gt; 匹配非数字字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; 匹配换行符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt; 匹配回车符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt; 匹配制表符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt; 匹配任何空白字符，与[\f\n\r\t\v]等价&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt; 匹配任何非空白字符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\w&lt;/code&gt; 匹配任何字类字符，以及下划线，等价于[A-Za-z0-9_]&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\W&lt;/code&gt; 与任何非单词字符匹配&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt; &amp;gt;&lt;/code&gt; 匹配词的开始与结束，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;monster&amp;gt;&lt;/code&gt;匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;monster hunter&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;monster&lt;/code&gt;，但不匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;monsterhunter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(pattern)&lt;/code&gt; 匹配pattern并获取这一匹配结果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?:pattern)&lt;/code&gt; 匹配但不获取匹配结果&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=pattern)&lt;/code&gt; 正向预检查，举个例子来说&lt;code class=&quot;highlighter-rouge&quot;&gt;windows (?=xp|7|8|10)&lt;/code&gt;匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;windows 10&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;，但不匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;windows 95&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;pattern&lt;/code&gt;是作为一个匹配的条件存在，且不出现在匹配结果中&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?!pattern)&lt;/code&gt; 反向预查，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;windows (?!xp|7|8|10)&lt;/code&gt;能匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;windows 95&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;，而非&lt;code class=&quot;highlighter-rouge&quot;&gt;windows xp&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;windows&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=pattern)&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=pattern)&lt;/code&gt;方向相反，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;(?=hre)f&lt;/code&gt;匹配&lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt;的结果是&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;正则表达式范例&lt;/h3&gt;

&lt;p&gt;测试用的是一个在线正则表达式测试工具：&lt;a href=&quot;http://tool.oschina.net/regex/&quot;&gt;oschina regex tool&lt;/a&gt;和Mac上的工具&lt;code class=&quot;highlighter-rouge&quot;&gt;RegExRx&lt;/code&gt;&lt;br /&gt;
测试文本是一段html内的head代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/1999/xhtml&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xml:lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;在线正则表达式测试&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;keywords&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;开源中国 在线工具,ostools,jsbin,加密/解密，Markdown,less,java api,php api,node.js api,QR Code&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shortcut icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/img/favicon.ico&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image/x-icon&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/basic.css?20120912&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/js/jquery/jquery-1.7.2.js&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/js/jquery/jquery.cookies.2.2.0.min.js&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/js/bootstrap/css/bootstrap.min.css&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;/js/bootstrap/js/bootstrap.min.js&#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;范例一：匹配中文词组&lt;code class=&quot;highlighter-rouge&quot;&gt;[\u4e00-\u9fa5]{1,}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/regex_chinese.png&quot; alt=&quot;regex chinese&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：匹URL链接&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-zA-z]+://\S*(/|\w)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/regex_url.png&quot; alt=&quot;regex url&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：匹配所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;href&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;链接 &lt;code class=&quot;highlighter-rouge&quot;&gt;(?&amp;lt;=href=(?:&quot;|&#39;)|src=(?:&quot;|&#39;))[^\s&#39;&quot;]*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/regex_href.png&quot; alt=&quot;regex href&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux下的正则表达式&lt;/h2&gt;

&lt;p&gt;各类环境对正则表达式语法的支持情况如下图，来源:&lt;a href=&quot;http://net.pku.edu.cn/~yhf/tutorial/tao_regexps_zh.html&quot;&gt;正则表达式之道&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/regex_support.png&quot; alt=&quot;regex support&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linux下中主要在各类命令中使用到正则表达式，分为POSIX(Portable Operating System Interfac for Unix)定义的基本正则表达式(BRE)和扩展正则表达式(ERE)。下面引用 &lt;a href=&quot;http://www.infoq.com/cn/news/2011/07/regular-expressions-6-POSIX&quot;&gt;Linux/Unix工具与正则表达式的POSIX规范&lt;/a&gt; 来展示它们的异同，和对应的工具。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/POSIX_KIND.png&quot; alt=&quot;POSIX kind&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/POSIX_USAGE.png&quot; alt=&quot;POSIX usage&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java&quot;&gt;Java下正则表达式&lt;/h2&gt;

&lt;p&gt;Java下正则表达式在使用时，其实要记住需要对&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;进行一次额外的转义，其它基本类似。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt;需要写成&lt;code class=&quot;highlighter-rouge&quot;&gt;\\S&lt;/code&gt;，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;在Java和正则中都为转义字符，&lt;code class=&quot;highlighter-rouge&quot;&gt;\\S&lt;/code&gt;相当于先转换成了&lt;code class=&quot;highlighter-rouge&quot;&gt;\S&lt;/code&gt;，然后在按照正则的规则去匹配。&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Mar 2016 11:28:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/develop/2016/03/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/develop/2016/03/11/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</guid>
        
        
        <category>Develop</category>
        
      </item>
    
      <item>
        <title>Linux命令之sed与awk</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sedmac&quot; id=&quot;markdown-toc-sedmac&quot;&gt;1. sed命令(Mac)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sed&quot; id=&quot;markdown-toc-sed&quot;&gt;sed命令语法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sed-1&quot; id=&quot;markdown-toc-sed-1&quot;&gt;sed命令示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#awk-mac&quot; id=&quot;markdown-toc-awk-mac&quot;&gt;2. awk (Mac)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#awk&quot; id=&quot;markdown-toc-awk&quot;&gt;awk语法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#awk-1&quot; id=&quot;markdown-toc-awk-1&quot;&gt;awk代码块表示方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#awk-2&quot; id=&quot;markdown-toc-awk-2&quot;&gt;awk内置变量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#awk-3&quot; id=&quot;markdown-toc-awk-3&quot;&gt;awk内置函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#awk-4&quot; id=&quot;markdown-toc-awk-4&quot;&gt;awk示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;是可以单独出书的两个Linux命令，它们的功能非常强大，本章节将分别介绍着两个命令。其中&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;gnu-sed 4.2.2&lt;/code&gt;版本，对应下文中出现的&lt;code class=&quot;highlighter-rouge&quot;&gt;gsed&lt;/code&gt;，而不是Mac自带的&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;同样使用&lt;code class=&quot;highlighter-rouge&quot;&gt;gnu&lt;/code&gt;版本的&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt;，对应文中出现的&lt;code class=&quot;highlighter-rouge&quot;&gt;gawk&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;sedmac&quot;&gt;1. sed命令(Mac)&lt;/h2&gt;

&lt;p&gt;sed是Linux中的一个文件编辑工具，按行处理文件内容，可以实现插入，删除，替换等功能。更重要的是sed命令可以用script来处理文本文件，能够应对复杂的编辑需求。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sed&quot;&gt;sed命令语法&lt;/h3&gt;

&lt;h4&gt;&lt;b&gt;基本格式 sed [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;b&gt;选项:&lt;/b&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e &amp;lt;script&amp;gt;&lt;/code&gt; 按script编辑文本并输出到控制台，但不修改原文件内容&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f filename&lt;/code&gt; 调用sed脚本文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; 直接修改读取的文件内容，而不输出到终端&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; 使用安静模式，只有经过sed处理的行才会被显示出来&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; 使用延伸型的正则表达式语法，预设的是基础的正则语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;&lt;b&gt;动作命令[n1[,n2]] function&lt;/b&gt;&lt;/h5&gt;
&lt;p&gt;n1,n2表示起始行和结束行，不一定存在，而function表示动作行为&lt;/p&gt;
&lt;h5&gt;&lt;b&gt;常用function命令:&lt;/b&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 新增一行内容（在指定行的下一行）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 取代内容，可取代n1,n2之间的行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; 删除行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; 插入一行内容（在指定行的上一行）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 列印，将某个选择的资料印出，常与&lt;code class=&quot;highlighter-rouge&quot;&gt;sed -n&lt;/code&gt;连用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; 取代，搭配正则表达式，替换文本中的内容&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;sed-1&quot;&gt;sed命令示例&lt;/h3&gt;
&lt;p&gt;1. 行的删除：`&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -lha | nl | gsed &#39;1,3d&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;删除输出中的第1到第3行，此时参数&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;可不加。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sed_d.png&quot; alt=&quot;sed delete&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2. 行的插入：&lt;/p&gt;

&lt;p&gt;a. 在指定行前插入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;4a 插入的第一行\n插入的第二行&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;b. 在指定行后插入&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;1i 插入的第一行\n插入的第二行&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;若要让操作更新到原文件中，需加&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;，该操作较为危险。建议使用&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed -i.bak &#39;1i test&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样的执行方式，通过这种方式可额外生成&lt;code class=&quot;highlighter-rouge&quot;&gt;testSed.bak&lt;/code&gt;文件，该文件保存了原始内容，这样更安全。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sed_insert.png&quot; alt=&quot;sed insert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3. 行的选择性显示：&lt;/p&gt;

&lt;p&gt;有时会显示文件中某个区间内容的需求，这时通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gsed -n&lt;/code&gt;可以做到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed -n &#39;2,$p&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sed_n.png&quot; alt=&quot;sed print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4. 搜索并执行命令：&lt;/p&gt;

&lt;p&gt;a. 搜索含有关键字的行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed -n &#39;/^第.行/p&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sed_search.png&quot; alt=&quot;sed search and print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b. 搜索并删除：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;/第四行/d&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gsed_sr.png&quot; alt=&quot;sed search and remove&quot; /&gt;&lt;/p&gt;

&lt;p&gt;c. 执行多组命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;/四/{s/行/列/;s/第四列/测试/}&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;表示替换，从图中的结果可以看到，这个过程有点类似&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL的where查询&lt;/code&gt;，后面的命令在前面的执行结果下执行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gsed_mul.png&quot; alt=&quot;sed search and multiple operations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5. 内容替换：&lt;/p&gt;

&lt;p&gt;a. 区域替换：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;2,3c 替换内容&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/sed_c.png&quot; alt=&quot;sed c replace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b. 搜索替换：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed &#39;s/行/列/g&#39; testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果没有&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;则只替换行内匹配的第一个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gsed_g.png&quot; alt=&quot;sed g replace&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6. 多重编辑：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gsed -e &#39;1i 测试行&#39; -e &#39;1d&#39;  testSed
gsed -e &#39;1d&#39; -e &#39;1i测试行&#39;  testSed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;从图中可以看到两者执行的区别，由于&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt;是按行读入缓冲区，处理后再读如下一行，所以多重编辑时命令的顺序对结果有影响。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gsed_e.png&quot; alt=&quot;sed -e&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;awk-mac&quot;&gt;2. awk (Mac)&lt;/h2&gt;

&lt;p&gt;awk时非常强大的文本分析工具，非常适用于生成分析报告。awk会将文本逐行的读入，默认以空格或制表符为分隔符进行切片，然后对切片后的部分分析处理。awk十分强大，实际上它也有自己的编程语言：“样式扫描和处理语言”，其名称源自于创始人Alfred Aho，Peter Weinberger，Brian Kernighan。&lt;/p&gt;

&lt;h3 id=&quot;awk&quot;&gt;awk语法&lt;/h3&gt;

&lt;h4&gt;&lt;b&gt;基本格式 awk [option] &#39;[pattern][codeblock]&#39; [filenames]&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;codeblock表示代码块区域&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; 指定域分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 调用脚本&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v&lt;/code&gt; 定义变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;awk-1&quot;&gt;awk代码块表示方法&lt;/h3&gt;
&lt;p&gt;awk中的&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN,END&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BEGIN {} // { statement one; statement two} END {}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt; 初始代码块&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; 匹配代码块，与sed中的用法类似&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; 命令代码块，包含多条命令语句，用&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;分隔&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;END&lt;/code&gt; 结尾代码块，在每一行执行完后运行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;awk中的条件语句与&lt;code class=&quot;highlighter-rouge&quot;&gt;C语言&lt;/code&gt;相同，支持&lt;code class=&quot;highlighter-rouge&quot;&gt;while,for,break,continue&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if( condition expression ){
    statement one;
}else if ( condition expression ){
    statement two;
}else{
    statement three;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;awk中的数组表示方式为&lt;code class=&quot;highlighter-rouge&quot;&gt;array[key]&lt;/code&gt;，其中&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; 可以是字母或数字，其内部实际上是用&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;的方式存储。&lt;/p&gt;

&lt;h3 id=&quot;awk-2&quot;&gt;awk内置变量&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 表示当前行所有内容，&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; 第n个域的内容，用&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;取值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARGC&lt;/code&gt; 命令行参数个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARGV&lt;/code&gt; 命令行参数排列&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENVIRON&lt;/code&gt; 支持队列中系统的环境变量使用&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILENAME&lt;/code&gt; 正在浏览的文件名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FNR&lt;/code&gt; 浏览文件的记录数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; 设置输入域的分隔符，等价于&lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt;选项，在&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;时定义&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NF&lt;/code&gt; 域的个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NR&lt;/code&gt; 已经读取的记录个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OFS&lt;/code&gt; 输出域分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ORS&lt;/code&gt; 输出记录分隔符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RS&lt;/code&gt; 控制记录分隔符&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;awk-3&quot;&gt;awk内置函数&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cos(x),sin(x),sqrt(x),rand()&lt;/code&gt;等算数类函数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sub(),index(),length(),substr(),sprintf(),split()&lt;/code&gt;等字符串函数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getline(),system(),close(),mktime(),systime()&lt;/code&gt;等其它函数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function funcName(){}&lt;/code&gt;自定义函数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详细内容参考：&lt;a href=&quot;http://blog.jobbole.com/92497/&quot;&gt;awk内部函数&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;awk-4&quot;&gt;awk示例&lt;/h3&gt;

&lt;p&gt;1. 打印账户和账户对应的shell：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat -n /etc/passwd | gawk -F &#39;:&#39; &#39;{print $1&quot; &quot;$5}&#39; | gsed &#39;1,10d&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;$5&lt;/code&gt;分别表示分割后的第一个和第五个域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/awk_print.png&quot; alt=&quot;awk print&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2. 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -lha | gawk &#39;{printf(&quot;owner:%-15s size:%-10s name:%-15s\n&quot;,$3,$5,$NF)}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;类似C语言的&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gawk_printf.png&quot; alt=&quot;awk printf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3. 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Begin End&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat /etc/passwd | gawk -F: &#39;BEGIN{print &quot;名称-权限&quot;} {print $1&quot;-&quot;$5} END{print &quot;the end!&quot;}&#39; | sed &#39;2,11d&#39; | column -t -s &#39;-&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/awk_begin_end.png&quot; alt=&quot;awk begin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4. awk中模式匹配的使用：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat -n /etc/passwd | gawk -F: &#39;/System/{print $1&quot; &quot;$5}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;搜索包含&lt;code class=&quot;highlighter-rouge&quot;&gt;System&lt;/code&gt;关键字的行并输出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/gawk_search.png&quot; alt=&quot;awk search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5. 统计文件夹下的文件数目：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -lha | gawk &#39;BEGIN {count=0} {count++} END { print &quot;File Count:&quot;count}&#39; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最好在&lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt;中初始化变量&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/awk_count.png&quot; alt=&quot;awk count&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6. 输出文件夹下大小小于200B的文件名称：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l | gawk &#39;BEGIN{i=0} {if(NF&amp;gt;=5&amp;amp;&amp;amp;$5&amp;lt;200){filename[i++]=$9;}} END{print &quot;total:&quot;i;for(j=0;j&amp;lt;i;j++){print &quot;filename:&quot;filename[j];}}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在调用某个域的值之前，需要先判断该域是否存在，此时用&lt;code class=&quot;highlighter-rouge&quot;&gt;NF&lt;/code&gt;值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/awk_if.png&quot; alt=&quot;awk if for&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7. 调用自定义函数实现范例6中的功能：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l | gawk &#39;function check(total,size){if(total&amp;gt;=5&amp;amp;&amp;amp;size&amp;lt;200){return 1;} return 0;} BEGIN{i=0} {if(check(NF,$5)){filename[i++]=$9;}} END{print &quot;total:&quot;i;for(j=0;j&amp;lt;i;j++){print &quot;filename:&quot;filename[j];}}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/awk_function.png&quot; alt=&quot;awk function&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 10 Mar 2016 11:31:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/10/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Eight.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/10/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Eight.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Shell脚本学习 初阶</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mac&quot; id=&quot;markdown-toc-mac&quot;&gt;范例代码(Mac下)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;基本知识介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;基本语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mac&quot;&gt;范例代码(Mac下)&lt;/h2&gt;

&lt;p&gt;以一段Git代码提交脚本为例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  # 添加目录下所有文件
2  git add . 
3  # message为git commit的值，默认值为当前时间，``间包含字符串将被按照命令执行。
4  message=`date +%Y-%m-%d-%H-%M`
5  # getopts命令可获取输入的参数，如m:则表示检查&#39;-m&#39;的参数输入，并将参数名存入opt中。
6  # 如果未找到参数，则存入?,参数值通过OPTARG变量获得，变量通过$取值。
7
8  while getopts m: opt
9  do
10   case $opt in
11     m)
12       message=$OPTARG
13       ;;
14     ?)
15       echo &quot;Usage: args [-m]&quot;
16       echo &quot;-m means message&quot;
17       echo &quot;exit&quot;
18       exit
19       ;;
20   esac
21 done
22 # git提交message信息
23 git commit -m &quot;$message&quot;
24 git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git代码提交脚本执行效果截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/git_shell.png&quot; alt=&quot;Git代码提交&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本知识介绍&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.jianshu.com/p/4b7f99486cab&quot;&gt;Shell脚本30分钟入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般所指的Shell是指Shell脚本（Shell script），是为Shell编写的脚本程序。而Shell本身是用户访问操作系统内核服务的程序界面，Shell编程与其它语言类似，只需要编写代码的编辑器和能够解释执行的程序即可。Bourne shell是标准的Shell解释器，其所在路径往往是&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在Shell脚本中，第一行一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt;是用于约定的标记，告诉系统该脚本需要什么解释器执行。当然如果文件以&lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt;作为后缀的话，不写这一行也能正确执行。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基本语法&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell变量&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;变量定义与赋值 &lt;code class=&quot;highlighter-rouge&quot;&gt;testVar=&quot;testValue&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;变量的取值只需要在前面加入&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;符号，如&lt;code class=&quot;highlighter-rouge&quot;&gt;$testVar&lt;/code&gt;，加花括号可以帮助解释器识别边界，如&lt;code class=&quot;highlighter-rouge&quot;&gt;${testVar}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 #! /bin/sh
2 count=0
3 for testVar in Let us learn Shell
4 do
5     echo &quot;Word:${testVar}_Number:$count&quot;
6     ((count++))
7 done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/var.png&quot; alt=&quot;var.sh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;字符串&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;单引号的特点: &lt;br /&gt;
1.单引号中的所有字符串都原样输出，字符串中的变量无效&lt;br /&gt;
2.单引号中不能出现单引号，转义亦无效&lt;/li&gt;
  &lt;li&gt;双引号的特点：&lt;br /&gt;
1.双引号中可以有变量，并读取变量值&lt;br /&gt;
2.双引号中可以出现转义字符&lt;/li&gt;
  &lt;li&gt;``符号之间字符串可用于执行指令&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2  testString=&#39;this is a test&#39;
3  echo &#39;$testString&#39;
4  echo &quot;$testString&quot;
5  testString=&quot;${testString} string catenate&quot;
6  echo $testString
7  testString=&quot;&quot;$testString&quot; string catenate&quot;
8  echo $testString
9  echo &quot;The length: ${#testString}&quot;
10 echo &quot;Part of the string: ${testString:1:7}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/shell_string.png&quot; alt=&quot;string.sh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell中的各种括号&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;作为脚本语言，shell各种各样的符号括号挺让人头疼，降低了其代码的可读性
参考：&lt;a href=&quot;http://blog.csdn.net/taiyang1987912/article/details/39551385&quot;&gt;Shell中各种括号的作用&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shell中大括号&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;可以用来限定变量名称的范围&lt;/li&gt;
  &lt;li&gt;Shell中&lt;code&gt;``&lt;/code&gt;和&lt;code&gt;()&lt;/code&gt;，可以执行其中的命令并读出结果&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(())&lt;/code&gt;中支持POSIX标准的计算，符合C语言的运算符都可以用在其中，表达式真值为1，假则为0&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt;中放置条件表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2  if ((1))
3  then
4      echo $(pwd)
5  fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/brackets.png&quot; alt=&quot;brackets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;条件判断与流程控制&lt;/b&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;if else代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  if condition
2  then
3      phase one
4      phase two
5  elif condition2
6  then
7      phase three
8  else
9      #else后不能为空
10      phase four
1 fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;for while代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# for (shell)
1  for param in paramOne paramTwo ... paramN
2  do
3      phase one
4      phase two
5  done
# for (C)
1  for (( EXP1;EXP2;EXP3))
2  do
3     phase one
4     phase two
5  done
# while
1  while condition
2  do
3     phase one
4  done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;case 代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  case $opt in
2       valueOne)
3          phase one
4          ;;
5       valueTwo)
6          phase two
7          ;;
8       *)
9          echo &quot;error&quot;
10 esac
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell函数&lt;/b&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2 
3  function add(){
4    if [ $# != 2 ]
5    then
6       return 1
7    else
8       return $(($1+$2))
9    fi
10 }
11
12 add 1 2
13 echo &quot;1+2=$?&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/shell_function.png&quot; alt=&quot;shell function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell传入变量&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt;当前脚本的文件名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$n&lt;/code&gt;第n个参数的值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;传入的参数个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt;所有参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;上个命令的退出状态或行数的返回值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;当前Shell进行ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell文件判断逻辑&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;－e&lt;/code&gt;：文件是否存在&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt;：文件存在且为块特殊文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;：文件存在且为字符特殊文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;：文件存在且为一个目录&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;：文件存在且为常规文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-L&lt;/code&gt;：文件存在且软链接&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;：文件存在且不为空&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;：文件存在且当前进程可读&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;：文件存在且当前进程可写&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;：文件存在且当前进程可执行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;：字符串长度不为空&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-z&lt;/code&gt;：字符串长度为空&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 07 Mar 2016 13:48:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/03/07/Linux%E4%B9%8BShell%E8%84%9A%E6%9C%AC.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/03/07/Linux%E4%B9%8BShell%E8%84%9A%E6%9C%AC.html</guid>
        
        
        <category>Shell</category>
        
      </item>
    
  </channel>
</rss>
