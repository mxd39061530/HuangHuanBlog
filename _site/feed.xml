<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>黄欢的博客</title>
    <description>黄欢的博客：程序，读书，电影</description>
    <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/</link>
    <atom:link href="http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 02 Mar 2016 22:48:18 +0800</pubDate>
    <lastBuildDate>Wed, 02 Mar 2016 22:48:18 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Linux命令学习的日常 Part Seven</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#uniqlinux&quot; id=&quot;markdown-toc-uniqlinux&quot;&gt;1. uniq命令(Linux)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mac-osx&quot; id=&quot;markdown-toc-mac-osx&quot;&gt;几个好玩的命令（Mac OSX）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#curlmac-osx&quot; id=&quot;markdown-toc-curlmac-osx&quot;&gt;2. curl命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#toplinux&quot; id=&quot;markdown-toc-toplinux&quot;&gt;3. top命令(Linux)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pastemac-osx&quot; id=&quot;markdown-toc-pastemac-osx&quot;&gt;4. paste命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cutmac-osx&quot; id=&quot;markdown-toc-cutmac-osx&quot;&gt;5. cut命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;uniqlinux&quot;&gt;1. uniq命令(Linux)&lt;/h2&gt;

&lt;p&gt;参考:&lt;a href=&quot;http://sadwxqezc.github.io/HuangHuanBlog/linux/2016/02/11/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Four.html&quot;&gt;sort命令&lt;/a&gt;
uniq命令通常和sort命令合用，用于检查文本中重复出现的行列，但前提是重复行必须是相邻的。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 uniq [option] [filename] [outputfilename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-c&lt;/code&gt; 显示该行重复出现的次数&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 仅仅显示重复出现的行列&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 仅显示出现一次的行列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;sort sort.txt | uniq -c&lt;/code&gt;等命令结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/uniq.png&quot; alt=&quot;uniq&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个好玩的命令站点：&lt;a href=&quot;http://www.commandlinefu.com/commands/browse/sort-by-votes&quot;&gt;Commandlinefu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/command.png&quot; alt=&quot;command&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mac-osx&quot;&gt;几个好玩的命令（Mac OSX）&lt;/h2&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;espeak haliluya&lt;/code&gt; 文本转语音命令，颇为有趣。Mac下可用&lt;code class=&quot;highlighter-rouge&quot;&gt;brew&lt;/code&gt;安装。&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;man ascii&lt;/code&gt; 可以方便的显示ascii 表&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ascii.png&quot; alt=&quot;ascii&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code class=&quot;highlighter-rouge&quot;&gt;time read&lt;/code&gt;计时器，按&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+D&lt;/code&gt;结束&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/time_read.png&quot; alt=&quot;time&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;curlmac-osx&quot;&gt;2. curl命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;curl命令是一个非常强大的文件传输工具，利用，利用URL规则它支持文件的上传和下载。curl支持包括HTTP,HTTPS,Ftp等多种协议，同时支持Post，cookies，限速，认证等众多功能。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 curl [option] [params]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-A&lt;/code&gt; 设置用户代理&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-c [file]&lt;/code&gt; 命令执行结束后将cookie写入到某个文件中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-C [offset]&lt;/code&gt; 断点续传&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e &lt;/code&gt;  设定来源网址&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-s &lt;/code&gt; 寂寞模式，不输出任何东西&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-S &lt;/code&gt; 显示错误&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-T [file] &lt;/code&gt; 上传文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u &lt;/code&gt; 设置用户名和密码&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-o [filename]&lt;/code&gt; 将文件写入到某个文件中&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-O &lt;/code&gt; 将文件写入到本地文件，保存原始文件名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;curl http://man.linuxde.net/test.iso -o filename.iso --progress&lt;/code&gt; 下载文件并显示进度条&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/curl_o.png&quot; alt=&quot;curl_o&quot; /&gt;&lt;/p&gt;

&lt;p&gt;该命令功能较多，今后将进一步补充&lt;/p&gt;

&lt;h2 id=&quot;toplinux&quot;&gt;3. top命令(Linux)&lt;/h2&gt;

&lt;p&gt;top命令实际上就是Linux下的“任务管理器”，能够实时的显示系统中各个进程的资源占用状况，默认刷新频率是5秒一次。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 top [option]&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;快捷键：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;P&lt;/code&gt; 根据CPU占用排序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; 根据内存使用大小排序&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 根据时间/累计时间排序&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一: &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; 显示效果，前五行显示了启动时间，任务数，cpu，内存和交换分区等信息，之后是更详细的各个进程信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/top.png&quot; alt=&quot;top&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二: &lt;code class=&quot;highlighter-rouge&quot;&gt;free -m&lt;/code&gt; 如果只想查看内存占用，同样可使用&lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;命令，一般选择按&lt;code class=&quot;highlighter-rouge&quot;&gt;MB&lt;/code&gt;显示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/free.png&quot; alt=&quot;free&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pastemac-osx&quot;&gt;4. paste命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;paste命令用于将多个文件的内容合并&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 paste [option] [filename]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; 串行处理而非平行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 设定间隔符号&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例：&lt;code class=&quot;highlighter-rouge&quot;&gt;paste -s -d &#39;:&#39; test2 test1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/paste.png&quot; alt=&quot;paste&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cutmac-osx&quot;&gt;5. cut命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;cut命令用于在文件中剪切数据，以每一行为处理对象。&lt;/p&gt;

&lt;h4&gt;&lt;b&gt;基本格式 cut [option] [filename]&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt; 按字节分割，空格算一个字节，汉字三个字节&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; 按字符分割&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 按域分割&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 指定域分隔符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -b 1-7,9&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_b.png&quot; alt=&quot;cut_b&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -c 1-5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_c.png&quot; alt=&quot;cut_c&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三: &lt;code class=&quot;highlighter-rouge&quot;&gt;date | cut -d &quot; &quot; -f 1-5 testColumn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cut_f.png&quot; alt=&quot;cut_f&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Mar 2016 11:29:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/01/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Seven.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/03/01/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Seven.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Cookie and Session</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#cookie&quot; id=&quot;markdown-toc-cookie&quot;&gt;Cookie&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cookie-&quot; id=&quot;markdown-toc-cookie-&quot;&gt;什么是Cookie ？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cookie-1&quot; id=&quot;markdown-toc-cookie-1&quot;&gt;Cookie的工作原理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cookie-2&quot; id=&quot;markdown-toc-cookie-2&quot;&gt;Cookie的类型与内容&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cookie-3&quot; id=&quot;markdown-toc-cookie-3&quot;&gt;Cookie示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#session&quot; id=&quot;markdown-toc-session&quot;&gt;Session&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#session-&quot; id=&quot;markdown-toc-session-&quot;&gt;什么是Session ？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#session-1&quot; id=&quot;markdown-toc-session-1&quot;&gt;Session的删除时间&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#session-2&quot; id=&quot;markdown-toc-session-2&quot;&gt;Session示例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cookiesession&quot; id=&quot;markdown-toc-cookiesession&quot;&gt;Cookie与Session的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cookie&quot;&gt;Cookie&lt;/h2&gt;

&lt;h3 id=&quot;cookie-&quot;&gt;什么是Cookie ？&lt;/h3&gt;

&lt;p&gt;由于&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;是无状态协议，它不会对之前发生过的请求和响应的状态进行管理。无状态协议虽然资源消耗少，但由于其无法管理如登陆状态等信息，给服务器管理客户端的状态带来了难题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/http.png&quot; alt=&quot;图解Http_状态&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了解决该问题，Cookie技术被引入，通过在请求和响应报文中写入Cookie信息来控制客户端的状态。&lt;/p&gt;

&lt;h3 id=&quot;cookie-1&quot;&gt;Cookie的工作原理&lt;/h3&gt;

&lt;p&gt;在服务端发送的响应报文内会有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Set-Cookie&lt;/code&gt;字段信息，通知客户端保存Cookie。当客户端在此往同一服务器发送请求时，客户端会自动在请求报文中加入Cookie值，其选择Cookie的依据是当前的url地址。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/http_process.png&quot; alt=&quot;Cookie工作流程&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cookie-2&quot;&gt;Cookie的类型与内容&lt;/h3&gt;

&lt;p&gt;Cookie中内容以Key-Value的形式存储，存在两种类型的Cookie:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;session cookie&lt;/code&gt;（会话Cookie）：未设置过期时间的cookie，一般被保存在内存中，cookie的生命周期为浏览器会话期间&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;persistent cookie&lt;/code&gt;（持久Cookie）：设置了过期时间的cookie，浏览器会将其保存在硬盘上，直至其过期失效&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS:图片来自《图解Http》,书中图画的萌，我就不重新画了&lt;/p&gt;

&lt;h3 id=&quot;cookie-3&quot;&gt;Cookie示例&lt;/h3&gt;

&lt;p&gt;参考：&lt;a href=&quot;http://www.importnew.com/15141.html&quot;&gt;Spring MVC&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.springapp.mvc.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

@Controller
@RequestMapping(value = &quot;/testCookie&quot;)
public class HelloController {

	@RequestMapping(method = {RequestMethod.POST, RequestMethod.GET})
	@ResponseBody
	public String testCookie(@CookieValue(value = &quot;testCookie&quot;, defaultValue = &quot;defaultCookieValue&quot;) String cookieValue, HttpServletResponse httpServletResponse) {
	/** 输出cookie内容 **/
	String result = &quot;&quot;;
	/** 创建Cookie **/
	Cookie cookie = new Cookie(&quot;testCookie&quot;, &quot;CookieValue&quot;);
	httpServletResponse.addCookie(cookie);
	result += &quot;Key:testCookie&quot; + &quot;Value:&quot; + cookieValue + &quot;n&quot;;
	return result;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要&lt;code class=&quot;highlighter-rouge&quot;&gt;@ResponseBody&lt;/code&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;的内容作为请求返回体，不然会跳转成&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;内容&lt;code class=&quot;highlighter-rouge&quot;&gt;.jsp&lt;/code&gt;之类的。&lt;/p&gt;

&lt;p&gt;第一次访问截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cookie_init.png&quot; alt=&quot;cookie_init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二次访问截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/cookie_after.png&quot; alt=&quot;cookie_after&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;session&quot;&gt;Session&lt;/h2&gt;

&lt;h3 id=&quot;session-&quot;&gt;什么是Session ？&lt;/h3&gt;

&lt;p&gt;本文所讲的为HTTP Session，在Java中该Session对象用&lt;code class=&quot;highlighter-rouge&quot;&gt;javax.servlet.http.HttpSession&lt;/code&gt;表示。Session代表服务器和浏览器的一次会话过程，当如JSP页面中未显示的禁止session时，在浏览器第一次请求该JSP时，服务器会为其自动创建一个session，并分配给其一个sessionID，返回给客户端。当客户端再次请求时，会自动在header中加上：&lt;code class=&quot;highlighter-rouge&quot;&gt;Cookie:JSESSIONID=分配到的sessionID&lt;/code&gt;，服务器会根据该ID在内存中找到之前创建的session对象（与Cookie不同，Session是保存在服务端）。对于同一个浏览器窗口中的多个标签，同时访问同一应用的不同页面，其session是一样的，但不同的浏览器窗口，其session不一样。&lt;/p&gt;

&lt;h3 id=&quot;session-1&quot;&gt;Session的删除时间&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Session超时&lt;/li&gt;
  &lt;li&gt;程序显示的调用&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSession.invalidate()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;服务器关闭或停止&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;session-2&quot;&gt;Session示例&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.springapp.mvc.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import javax.servlet.http.HttpSession;

/**
 * Created by huanghuan on 16/3/1.
 */

@Controller
@RequestMapping(value = &quot;/testSession&quot;)
public class TestSession {

    @RequestMapping(method = RequestMethod.GET)
    @ResponseBody
    public String testSession(HttpSession httpSession) {
        /** 输出结果 **/
        String result = &quot;SessionID:&quot;;
        if (httpSession != null) {
            result += httpSession.getId();
            /** 参数设置 **/
            Object value = httpSession.getAttribute(&quot;key&quot;);
            if (value == null) {
                httpSession.setAttribute(&quot;key&quot;, &quot;value&quot;);
            } else {
                result += &quot; &quot; + httpSession.getAttribute(&quot;key&quot;).toString();
            }
        }
        return result;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一次访问截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/testSession_init.png&quot; alt=&quot;testSession_init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二次访问截图，包括在浏览器开两个窗口的情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/testSession_after.png&quot; alt=&quot;testSession_after&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cookiesession&quot;&gt;Cookie与Session的区别&lt;/h2&gt;

&lt;p&gt;主要在于Cookie保存在客户端而Session保存在服务端，单个Cookie保存的数据不能超过4k，同时很多浏览器限制一个站点的总Cookie数为20，而服务端的Session会占用服务器内存，影响性能。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 20:06:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/backend/2016/02/29/Cookies-And-Session.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/backend/2016/02/29/Cookies-And-Session.html</guid>
        
        
        <category>Backend</category>
        
      </item>
    
      <item>
        <title>算法补完计划</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;算法补完计划&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;算法补完计划&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;之前的算法学习更多的是为面试准备，具有很强的目的性。现在的出发点是进一步理解和掌握基本的算法，并静下心来领会算法中思考和解决问题的方式，故名为算法补完计划&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 10:30:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/algorithm/2016/02/25/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%81%93.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/algorithm/2016/02/25/%E7%AE%97%E6%B3%95%E4%B9%8B%E9%81%93.html</guid>
        
        
        <category>Algorithm</category>
        
      </item>
    
      <item>
        <title>Shell脚本实例</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#fileopen&quot; id=&quot;markdown-toc-fileopen&quot;&gt;fileopen命令实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fileopen&quot;&gt;fileopen命令实现&lt;/h2&gt;

&lt;p&gt;fileopen命令是为了实现Mac系统下，在终端中用应用打开文件。&lt;br /&gt;
首先将目录&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/huanghuan/Work/MyCMD &lt;/code&gt;命令加入环境变量中，Mac下可配置在&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt;中。然后创建&lt;code class=&quot;highlighter-rouge&quot;&gt;fileopen&lt;/code&gt;文件，其内容为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1  #! /bin/sh
  2  if [ $# != 2 ]
  3  then
  4      echo &quot;输入参数错误!&quot;
  5  else
  6     search_result=`find /Applications -maxdepth 1  -name *${1}*.app | wc -l`
  7     app_list=`find /Applications -maxdepth 1  -name *${1}*.app`
  8     if (($search_result&amp;lt;=0))
  9     then
  10        echo &quot;未找到对应程序&quot;
  11    elif (($search_result==1))
  12    then
  13        echo &quot;打开文件&quot;
  14        open ${app_list} ${2}
  15    else
  16        echo &quot;符合条件的程序有:n${app_list}&quot;
  17        echo &quot;请重新输入正确的程序名&quot;
  18    fi
  19 fi
  20 exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;命令的运行效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/fileopen.png&quot; alt=&quot;fileopen命令&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PS:该命令将进一步完善，目前作为一个Shell练习而简单实现&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Feb 2016 16:31:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/02/24/Shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/02/24/Shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E4%BE%8B.html</guid>
        
        
        <category>Shell</category>
        
      </item>
    
      <item>
        <title>边边角角的知识点</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#setuid&quot; id=&quot;markdown-toc-setuid&quot;&gt;1. setuid权限&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;2. 执行权限&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;3. 标准输出与错误输出&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setuid&quot;&gt;1. setuid权限&lt;/h2&gt;

&lt;p&gt;今天调了一下Iterm2中&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;的配色，发现在&lt;code class=&quot;highlighter-rouge&quot;&gt;\bin&lt;/code&gt;目录下有如图的显示效果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/setuid_1.png&quot; alt=&quot;setuid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ps和rcp的执行文件颜色和其它不同，从&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lha&lt;/code&gt;的结果来看它们两个与其它文件并没有什么不同，于是我再用&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;命令查看文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/setuid_2.png&quot; alt=&quot;setuid_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时发现ps和rcp的前面多了个&lt;code class=&quot;highlighter-rouge&quot;&gt;setuid&lt;/code&gt;的参数，该参数是Linux的三个特殊权限之一，其作用是让执行该命令的用户拥有所有者的权限。除了&lt;code class=&quot;highlighter-rouge&quot;&gt;setuid&lt;/code&gt;外还有&lt;code class=&quot;highlighter-rouge&quot;&gt;setgid&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;stick bit&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;2. 执行权限&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/execute.png&quot; alt=&quot;execute&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如上图所示，作为execute.sh的owner，我拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;rw&lt;/code&gt;读写权限，但如果想通过&lt;code class=&quot;highlighter-rouge&quot;&gt;./execute.sh&lt;/code&gt;直接执行，却被告知权限不够，而用&lt;code class=&quot;highlighter-rouge&quot;&gt;sh execute.sh&lt;/code&gt;却能够执行。后者实际上是将脚本交由&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;执行，仅仅需要读权限即可。那么如果我只有&lt;code class=&quot;highlighter-rouge&quot;&gt;execute.sh&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;执行权限，是否能够直接执行了？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/execute_x.png&quot; alt=&quot;execute_x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，仅仅拥有执行权限或仅拥有读权限，都不能直接执行&lt;code class=&quot;highlighter-rouge&quot;&gt;execute.sh&lt;/code&gt;，只有当两种权限同时具备时才可。我的理解是，执行权限控制文件是否可直接执行，而由于该文件亦需要&lt;code class=&quot;highlighter-rouge&quot;&gt;\bin\sh&lt;/code&gt;程序去读取并解释执行，所以同时亦需要读权限。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;3. 标准输出与错误输出&lt;/h2&gt;

&lt;p&gt;在Shell脚本中有时能看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;这样的语句，在语句中&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;/dev/null&lt;/code&gt;等同于&lt;code class=&quot;highlighter-rouge&quot;&gt;1&amp;gt;/dev/null&lt;/code&gt;，其中&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;标准输出，而&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt;表示空设备文件。默认的标准输出和标准错误输出都是打印在屏幕上，&lt;code class=&quot;highlighter-rouge&quot;&gt;1&amp;gt;/dev/null&lt;/code&gt;则表示不输出任何信息到终端，也不定向到系统文件中。而&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;表示标准错误输出，而&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;表示等同于的意思，&lt;code class=&quot;highlighter-rouge&quot;&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;则表示为标准错误输出的重定向等同于标准输出，整条语句的意思实际傻姑娘就是不输出任何内容。&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Feb 2016 10:41:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/pieces/2016/02/24/%E8%BE%B9%E8%BE%B9%E8%A7%92%E8%A7%92%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/pieces/2016/02/24/%E8%BE%B9%E8%BE%B9%E8%A7%92%E8%A7%92%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9.html</guid>
        
        
        <category>Pieces</category>
        
      </item>
    
      <item>
        <title>读书笔记-学</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#effective-java&quot; id=&quot;markdown-toc-effective-java&quot;&gt;1. Effective Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;effective-java&quot;&gt;1. Effective Java&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By Joshua Bloch&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/effective_java.jpg&quot; alt=&quot;Effective Java&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Feb 2016 19:26:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%AD%A6.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%AD%A6.html</guid>
        
        
        <category>Read</category>
        
      </item>
    
      <item>
        <title>读书笔记-思</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;1. 万历十五年&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#this-is-water&quot; id=&quot;markdown-toc-this-is-water&quot;&gt;2. This is Water&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 万历十五年&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;[美]黄仁宇著&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/wanli.jpg&quot; alt=&quot;万历十五年&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在看《万历十五年》之前，我先读完了整套《明朝那些事》，算是对整个明史有了一个全局的了解。《明朝那些事》算是在用网络小说的手法写历史，带入了较多作者个人的感情，每次人物总结会有一定的美化倾向，不够客观。但《明朝》这本书虽然不客观，却也不离谱，论述皆依据史实，同时文笔诙谐幽默，尤其对人物的描写着重笔墨，读起来通俗易懂，充满乐趣。因此，《明朝那些事》是文言文阅读能力有限的大众了解明史的较好途径，其中对于明朝政治，经济，军事等细节皆有描述，譬如“火耗”，“东林党”，&quot;心学&quot;等名词在其中有详尽的解释，能够大大降低阅读《万历十五年》的难度。&lt;/p&gt;

&lt;p&gt;万历十五年即为1587年，作者认为这一年为明朝历史的转折点，这个帝国从此走向灭亡。而我对本书的理解是，其作为转折点的原因有二：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;万历皇帝的怠政&lt;/li&gt;
  &lt;li&gt;国家的积弊：长期的以道德代替法律治理国家，以及文官治国发展到了一个顶峰，国家的体制已经凝固，难以改革。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然历史读起来会让人觉得事情都是理所当然的发生，但黄仁宇先生却以1587年为剖面，分析了人在其中的推动作用，这是尤为难得的贡献。而他在书中的分析也让人明白，即使人在历史中起了重大的推动作用，但该发生的事情却早晚必会发生。明朝的实际主人是文人阶层，底层人民受他们的统治。底层的人通过几代人的努力才有可能通过科举进入文人阶层，而文人阶层也只是为了维护国家的稳定，他们以道德约束这个有千万个农村构成的国家，却根本无心推动社会的发展。如此的社会循环所维持的时间能到达300年，之后则朝代更替再来一次。看历史总会有中悲凉的感觉，似乎所有的事情都是循环往复发生，有种宿命论的感觉。然而社会制度的变迁，其触发的源头却往往从技术的革新开始，而技术革新的本源来自于人们探索的精神。我想无论是制度，技术，主义，它们实际也只是人们探索的产物，而这种探索的精神为什么又只有人类才有，于其它地球生物上却并未看到。这样的精神是人先天就存在的，还是因为一些偶然和巧合正好赋予在人的身上了，这让我颇为费解。&lt;/p&gt;

&lt;h2 id=&quot;this-is-water&quot;&gt;2. This is Water&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;By David Foster Wallace&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/this_is_water.jpg&quot; alt=&quot;this is water&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在繁琐无聊的日常中，日复一日地保持自觉与警醒，困难得不可想象&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;视频链接：&lt;a href=&quot;http://v.youku.com/v_show/id_XNjYyMjYzNDky.html?from=y1.2-1-103.3.4-1.1-1-1-3-0#paction&quot;&gt;生命中最简单又最困难的事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2016年2月24日：写给将要参加工作的自己，莫要被生活所淹没，选择思考的方式，保持自觉与警醒。&lt;/p&gt;

&lt;p&gt;To be continued&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 17:07:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/read/2016/02/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E6%80%9D.html</guid>
        
        
        <category>Read</category>
        
      </item>
    
      <item>
        <title>Linux命令学习的日常 Part Six</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tarmac-osx&quot; id=&quot;markdown-toc-tarmac-osx&quot;&gt;1. tar命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#aliasmac-osx&quot; id=&quot;markdown-toc-aliasmac-osx&quot;&gt;2. alias命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#chmodmac-osx&quot; id=&quot;markdown-toc-chmodmac-osx&quot;&gt;3. chmod命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mac-osx&quot; id=&quot;markdown-toc-mac-osx&quot;&gt;冷门命令(Mac OSX)&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#a-pv&quot; id=&quot;markdown-toc-a-pv&quot;&gt;a. pv命令&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#b-bc&quot; id=&quot;markdown-toc-b-bc&quot;&gt;b. bc命令&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tarmac-osx&quot;&gt;1. tar命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;tar命令用于文件的解压或压缩&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 tar [main option] [accessibility options] [filename or dir]&lt;/b&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;b&gt;main option 主选项 三者有且只能有一个&lt;/b&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-c&lt;/code&gt; 创建新的文件，相当于打包&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-x&lt;/code&gt; 释放文件，相当于拆包&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; 列出档案文件的内容，查看已经备份了哪些文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;b&gt;accessibility options 辅助选项&lt;/b&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-z&lt;/code&gt; 是否需要用gzip压缩或解压，一般格式为.tar.gz或者.tgz&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-j&lt;/code&gt; 是否需要用bzip2压缩或解压，一般格式为.tar.bz2&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; 压缩过程中显示文件&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 使用文档名&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--exclude FILE&lt;/code&gt; 压缩过程中不要将File打包&amp;lt;/code&amp;gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-C dir&lt;/code&gt; 切换工作目录，参考:&lt;a href=&quot;http://www.cnblogs.com/li-hao/archive/2011/10/03/2198480.html&quot;&gt;Linux下使用tar命令&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -xzvf mbadolato-iTerm2-Color-Schemes-a646a1d.tar.gz&lt;/code&gt; 解压到当前文件夹&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_xzvf.png&quot; alt=&quot;tar_xzvf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -tf mbadolato-iTerm2-Color-Schemes-a646a1d.tar.gz&lt;/code&gt; 显示压缩包中的文件目录，如果文件是用gizp压缩的需要加z参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_tf.png&quot; alt=&quot;tar_tf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：&lt;code class=&quot;highlighter-rouge&quot;&gt;tar -cjvf ./test.bz2 ./mbadolato-iTerm2-Color-Schemes-a646a1d&lt;/code&gt; 压缩文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tar_jcvf.png&quot; alt=&quot;tar_jcvf&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;aliasmac-osx&quot;&gt;2. alias命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;alias命令用来设定指令的别名，可以使用该命令将较长的命令简化。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 alias newCmd=&#39;originCmd [option]&#39;&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;alias -p&lt;/code&gt;显示已经定义的别名，可用&lt;code class=&quot;highlighter-rouge&quot;&gt;unalias&lt;/code&gt;命令删除别名&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/alias.png&quot; alt=&quot;alias&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;alias ll=&#39;ls -lhaS&#39;&lt;/code&gt;可以缩短命令长度，如果要使该alias长期有效，需要写在系统环境变量中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/alias_ll.png&quot; alt=&quot;alias_ll&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;chmodmac-osx&quot;&gt;3. chmod命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;chmod命令用于设定文件或目录的权限，可以用数字或符号的方式进行设定，这里推荐用符号的方式&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 chmod [option] [filename|dirname]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-R&lt;/code&gt;递归的持续变更&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod u-x,g+w,o=rwx function.sh&lt;/code&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;表示文件所有者，&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;表示组用户，&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;表示其它用户，&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;表示所有用户。而&lt;code class=&quot;highlighter-rouge&quot;&gt;-,+,=&lt;/code&gt;分别表示删除，增加和设定权限。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/chmod_ugo.png&quot; alt=&quot;chmod_ugo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod a=rwx function.sh&lt;/code&gt;设定所有类型用户的权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/chmod_a.png&quot; alt=&quot;chmod_a&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
参考:&lt;a href=&quot;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&quot;&gt;命令行的艺术&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mac-osx&quot;&gt;冷门命令(Mac OSX)&lt;/h2&gt;

&lt;h3 id=&quot;a-pv&quot;&gt;a. pv命令&lt;/h3&gt;

&lt;p&gt;pv命令可以通过管道来显示数据的处理进度&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 pv [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-p&lt;/code&gt; 显示百分比&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-t&lt;/code&gt; 显示时间&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-r&lt;/code&gt; 传输速率&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; 估计的剩余时间&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-n&lt;/code&gt; 用数字代替进度条来显示百分比&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-L&lt;/code&gt; 限制传输速度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;pv ./12怒汉.mkv &amp;gt; ~/Work/Test/angry.mkv&lt;/code&gt; 显示拷贝的速度和百分比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/pv.png&quot; alt=&quot;pv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;echo &#39;this is a pv test&#39; | pv -L 2&lt;/code&gt;  限制传输速度为2Bytes&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/pv_L.png&quot; alt=&quot;pv_L&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;b-bc&quot;&gt;b. bc命令&lt;/h3&gt;

&lt;p&gt;bc命令可以用于计算&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 bc [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-l&lt;/code&gt; 定义数学函数的库，并将初始值scale设定为20&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;bc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/bc.png&quot; alt=&quot;bc&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 23 Feb 2016 11:36:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/02/23/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Six.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/02/23/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Six.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>Shell脚本学习 初阶</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#mac&quot; id=&quot;markdown-toc-mac&quot;&gt;范例代码(Mac下)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;基本知识介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;基本语法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mac&quot;&gt;范例代码(Mac下)&lt;/h2&gt;

&lt;p&gt;以一段Git代码提交脚本为例：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  # 添加目录下所有文件
2  git add . 
3  # message为git commit的值，默认值为当前时间，``间包含字符串将被按照命令执行。
4  message=`date +%Y-%m-%d-%H-%M`
5  # getopts命令可获取输入的参数，如m:则表示检查&#39;-m&#39;的参数输入，并将参数名存入opt中。
6  # 如果未找到参数，则存入?,参数值通过OPTARG变量获得，变量通过$取值。
7
8  while getopts m: opt
9  do
10   case $opt in
11     m)
12       message=$OPTARG
13       ;;
14     ?)
15       echo &quot;Usage: args [-m]&quot;
16       echo &quot;-m means message&quot;
17       echo &quot;exit&quot;
18       exit
19       ;;
20   esac
21 done
22 # git提交message信息
23 git commit -m &quot;$message&quot;
24 git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Git代码提交脚本执行效果截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/git_shell.png&quot; alt=&quot;Git代码提交&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本知识介绍&lt;/h2&gt;
&lt;p&gt;参考：&lt;a href=&quot;http://www.jianshu.com/p/4b7f99486cab&quot;&gt;Shell脚本30分钟入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一般所指的Shell是指Shell脚本（Shell script），是为Shell编写的脚本程序。而Shell本身是用户访问操作系统内核服务的程序界面，Shell编程与其它语言类似，只需要编写代码的编辑器和能够解释执行的程序即可。Bourne shell是标准的Shell解释器，其所在路径往往是&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在Shell脚本中，第一行一般是&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt;是用于约定的标记，告诉系统该脚本需要什么解释器执行。当然如果文件以&lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt;作为后缀的话，不写这一行也能正确执行。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section-1&quot;&gt;基本语法&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell变量&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;变量定义与赋值 &lt;code class=&quot;highlighter-rouge&quot;&gt;testVar=&quot;testValue&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;变量的取值只需要在前面加入&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;符号，如&lt;code class=&quot;highlighter-rouge&quot;&gt;$testVar&lt;/code&gt;，加花括号可以帮助解释器识别边界，如&lt;code class=&quot;highlighter-rouge&quot;&gt;${testVar}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 #! /bin/sh
2 count=0
3 for testVar in Let us learn Shell
4 do
5     echo &quot;Word:${testVar}_Number:$count&quot;
6     ((count++))
7 done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/var.png&quot; alt=&quot;var.sh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;字符串&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;单引号的特点: &lt;br /&gt;
1.单引号中的所有字符串都原样输出，字符串中的变量无效&lt;br /&gt;
2.单引号中不能出现单引号，转义亦无效&lt;/li&gt;
  &lt;li&gt;双引号的特点：&lt;br /&gt;
1.双引号中可以有变量，并读取变量值&lt;br /&gt;
2.双引号中可以出现转义字符&lt;/li&gt;
  &lt;li&gt;``符号之间字符串可用于执行指令&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2  testString=&#39;this is a test&#39;
3  echo &#39;$testString&#39;
4  echo &quot;$testString&quot;
5  testString=&quot;${testString} string catenate&quot;
6  echo $testString
7  testString=&quot;&quot;$testString&quot; string catenate&quot;
8  echo $testString
9  echo &quot;The length: ${#testString}&quot;
10 echo &quot;Part of the string: ${testString:1:7}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/shell_string.png&quot; alt=&quot;string.sh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell中的各种括号&lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;作为脚本语言，shell各种各样的符号括号挺让人头疼，降低了其代码的可读性
参考：&lt;a href=&quot;http://blog.csdn.net/taiyang1987912/article/details/39551385&quot;&gt;Shell中各种括号的作用&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shell中大括号&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;可以用来限定变量名称的范围&lt;/li&gt;
  &lt;li&gt;Shell中&lt;code&gt;``&lt;/code&gt;和&lt;code&gt;()&lt;/code&gt;，可以执行其中的命令并读出结果&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;(())&lt;/code&gt;中支持POSIX标准的计算，符合C语言的运算符都可以用在其中，表达式真值为1，假则为0&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;[]&lt;/code&gt;中放置条件表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2  if ((1))
3  then
4      echo $(pwd)
5  fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;脚本执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/brackets.png&quot; alt=&quot;brackets&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;条件判断与流程控制&lt;/b&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;if else代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  if condition
2  then
3      phase one
4      phase two
5  elif condition2
6  then
7      phase three
8  else
9      #else后不能为空
10      phase four
1 fi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;for while代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# for (shell)
1  for param in paramOne paramTwo ... paramN
2  do
3      phase one
4      phase two
5  done
# for (C)
1  for (( EXP1;EXP2;EXP3))
2  do
3     phase one
4     phase two
5  done
# while
1  while condition
2  do
3     phase one
4  done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;case 代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  case $opt in
2       valueOne)
3          phase one
4          ;;
5       valueTwo)
6          phase two
7          ;;
8       *)
9          echo &quot;error&quot;
10 esac
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell函数&lt;/b&gt;&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;代码范例：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1  #! /bin/sh
2 
3  function add(){
4    if [ $# != 2 ]
5    then
6       return 1
7    else
8       return $(($1+$2))
9    fi
10 }
11
12 add 1 2
13 echo &quot;1+2=$?&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;执行结果：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/shell_function.png&quot; alt=&quot;shell function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;Shell传入变量&lt;/b&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt;当前脚本的文件名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$n&lt;/code&gt;第n个参数的值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;传入的参数个数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt;所有参数&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;上个命令的退出状态或行数的返回值&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;当前Shell进行ID&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 17:27:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/02/21/Linux%E4%B9%8BShell%E8%84%9A%E6%9C%AC.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/shell/2016/02/21/Linux%E4%B9%8BShell%E8%84%9A%E6%9C%AC.html</guid>
        
        
        <category>Shell</category>
        
      </item>
    
      <item>
        <title>Linux命令学习的日常 Part Five</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ps&quot; id=&quot;markdown-toc-ps&quot;&gt;1. ps命令&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmuxmac-osx&quot; id=&quot;markdown-toc-tmuxmac-osx&quot;&gt;2. tmux命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ackmac-osx&quot; id=&quot;markdown-toc-ackmac-osx&quot;&gt;3. ack命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#thefuckmac-osx&quot; id=&quot;markdown-toc-thefuckmac-osx&quot;&gt;4. thefuck命令(Mac OSX)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ps&quot;&gt;1. ps命令&lt;/h2&gt;

&lt;p&gt;ps命令用来在Linux系统中显示进程的状态快照，其参数选项可谓非常之多。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 ps [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-a&lt;/code&gt; 显示所有用户的进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-x&lt;/code&gt; 显示没有控制终端的进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-u&lt;/code&gt; 按照用户名称查询进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 列出全部信息，常和其它选项联用&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-j&lt;/code&gt; 用任务格式来显示进程&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; 显示所有进程&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;ps -ef&lt;/code&gt; 用标准格式显示所有进程&lt;br /&gt;
显示的项目有：UID, PID, PPID(父进程ID), C(CPU资源百分比), STIME, TTY, TIME, CMD&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ps_ef.png&quot; alt=&quot;ps_ef&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：&lt;code&gt;ps aux&lt;/code&gt;&lt;br /&gt;
显示的项目有：USER, PID, %CPU, %MEM, VSZ(虚拟内存量KB), RSS(固定内存量), TTY(进程所运行在的终端机), STAT, START, TIME, COMMAND&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ps_aux.png&quot; alt=&quot;ps_aux&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;tmuxmac-osx&quot;&gt;2. tmux命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;tmux(Terminal Multiplexer)命令是一个颇为炫酷的命令，其特点与screen命令类似。tmux通过开出窗口，分拆面板，接管和分离会话，能够让使用者在一个窗口内同时进行多项操作。&lt;br /&gt;
tmux在osx的安装方式：&lt;code&gt;brew install tmux&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 tmux [option]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;tmux new -s sessionName&lt;/code&gt; 创建新的session会话&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux attach -t sessionName&lt;/code&gt; 重新连接上某一个session&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux kill-session -t sessionName&lt;/code&gt; 杀死某个session&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; 显示所有会话&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;tmux new -s mySession&lt;/code&gt; 创建一个名为mySession的会话&lt;br /&gt;
输入&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b d&lt;/code&gt;将从此会话脱离，如果要重新连接，则使用&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux attach -t mySession&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_mySession.png&quot; alt=&quot;tmux_new&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例二：在范例一的mySession中按下&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b c&lt;/code&gt;则会在mySession中创建一个新的窗口&lt;br /&gt;
可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b w&lt;/code&gt;来查看窗口列表，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &amp;lt;窗口号&amp;gt;&lt;/code&gt;来切换窗口&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b f&lt;/code&gt;来查找窗口，&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;来退出窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_windows.png&quot; alt=&quot;tmux_multiple&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了便于穿窗口的识别，还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b ,&lt;/code&gt;来重命名窗口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_rename.png&quot; alt=&quot;tmux_rename&quot; /&gt;&lt;/p&gt;

&lt;p&gt;范例三：tmux还支持把窗口分割成多个面板，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &quot;&lt;/code&gt;为水平分割，&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b %&lt;/code&gt;为垂直分割&lt;br /&gt;
通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+b &amp;lt;光标键&amp;gt;&lt;/code&gt;来进行窗口移动&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/tmux_panes.png&quot; alt=&quot;tmux_panes&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ackmac-osx&quot;&gt;3. ack命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;ack(better than grep)命令的作用和grep类似，但效果更好。&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 ack [option] [pattern]&lt;/b&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 按单词匹配&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;--ingore-dir&lt;/code&gt; 忽略某些目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;范例一：&lt;code&gt;ack -w 测试&lt;/code&gt; 与grep搜索的对比&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/ack_w.png&quot; alt=&quot;ack_w&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;thefuckmac-osx&quot;&gt;4. thefuck命令(Mac OSX)&lt;/h2&gt;

&lt;p&gt;thefuck命令就是用在你想说&lt;code class=&quot;highlighter-rouge&quot;&gt;fuck&lt;/code&gt;的时候，它能够自动尝试修复有错误的命令&lt;/p&gt;
&lt;h4&gt;&lt;b&gt;基本格式 fuck [option] &lt;/b&gt;&lt;/h4&gt;
&lt;p&gt;需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;中设置&lt;code class=&quot;highlighter-rouge&quot;&gt;eval $(thefuck --alias)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;范例一：&lt;code&gt;git brnch&lt;/code&gt;后回车再输入&lt;code class=&quot;highlighter-rouge&quot;&gt;fuck&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/HuangHuanBlog/pics/thefuck.png&quot; alt=&quot;fuck&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Feb 2016 10:10:00 +0800</pubDate>
        <link>http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/02/16/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Five.html</link>
        <guid isPermaLink="true">http://sadwxqezc.github.io/HuangHuanBlog//HuangHuanBlog/linux/2016/02/16/Linux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0-Part-Five.html</guid>
        
        
        <category>Linux</category>
        
      </item>
    
  </channel>
</rss>
